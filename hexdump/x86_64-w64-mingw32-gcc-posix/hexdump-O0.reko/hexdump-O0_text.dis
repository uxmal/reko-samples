void fn0000000067D81000()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO rax rcx
// Preserved: rsp
fn0000000067D81000_entry:
l0000000067D81000:
l0000000067D81007_thunk_fn0000000067D821A0:
	fn0000000067D821A0(0x0000000067D87000<p64>)
	return
fn0000000067D81000_exit:


word32 fn0000000067D81010(word32 edx, selector gs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
// MayUse:  gs:[0..15] rdx:[0..31]
// LiveOut: rax
// Trashed: SCZO rax rcx rdx
// Preserved: r12 r13 r8 rbp rbx rdi rsi rsp
fn0000000067D81010_entry:
	word32 edx = SLICE(rdx, word32, 0)
l0000000067D81010:
	branch edx != 0<32> l0000000067D810A0
l0000000067D810A0:
	branch edx != 1<32> l0000000067D81158
l0000000067D81158:
	return 1<32>
l0000000067D810A9:
	word64 rbx_50 = Mem20[0x0000000067D841E0<p64>:word64]
	word64 rsi_51 = Mem20[Mem20[gs:0x30<32>:word64] + 8<64>:word64]
l0000000067D810E0:
	word32 edi_109
	__lock()
	word64 rax_63
	__cmpxchg(Mem20[rbx_50:word64], rsi_51, 0<u64>, out rax_63)
	branch rax_63 != 0<64> l0000000067D810D0
l0000000067D810D0:
	branch rsi_51 == rax_63 l0000000067D81190
l0000000067D81190:
	edi_109 = 1<32> (alias)
l0000000067D810D9:
	Sleep(0x3E8<u64>)
l0000000067D810ED:
	edi_109 = 0<32> (alias)
l0000000067D810EF:
	word64 rsi_80 = Mem20[0x0000000067D841F0<p64>:word64]
	branch SLICE(CONVERT(Mem20[rsi_80:word32], word32, uint64), word32, 0) == 1<32> l0000000067D811F0
l0000000067D811F0:
	_amsg_exit(0x1F<u64>)
l0000000067D81101:
	branch SLICE(CONVERT(Mem20[rsi_80:word32], word32, uint64), word32, 0) == 0<32> l0000000067D811B0
l0000000067D811B0:
	word64 rdx_94 = Mem20[0x0000000067D84230<p64>:word64]
	word64 rcx_95 = Mem20[0x0000000067D84220<p64>:word64]
	Mem96[rsi_80:word32] = 1<32>
	_initterm(rcx_95, rdx_94)
l0000000067D8110B:
	branch SLICE(CONVERT(Mem98[rsi_80:word32], word32, uint64), word32, 0) == 1<32> l0000000067D811D0
l0000000067D811D0:
	_initterm(Mem98[0x0000000067D84200<p64>:word64], Mem98[0x0000000067D84210<p64>:word64])
	Mem106[rsi_80:word32] = 2<32>
l0000000067D81116:
	branch edi_109 == 0<32> l0000000067D811A0
l0000000067D811A0:
	Mem124[rbx_50:word64] = 0<u64>
l0000000067D8111E:
	branch Mem126[Mem126[0x0000000067D841B0<p64>:word64]:word64] == 0<64> l0000000067D8113A
l0000000067D8112D:
	fn0000000067D81580(2<32>)
l0000000067D8113A:
	Mem156[0x0000000067D87018<p64>:word32] = Mem126[0x0000000067D87018<p64>:word32] + 1<32>
	return 1<32>
l0000000067D81026:
	word32 edx_183 = SLICE(CONVERT(Mem20[0x0000000067D87018<p64>:word32], word32, uint64), word32, 0)
	word64 rax_182 = 0<u64>
	branch edx_183 <= 0<32> l0000000067D81090
l0000000067D81032:
	word64 rbx_188 = Mem20[0x0000000067D841E0<p64>:word64]
	Mem197[0x0000000067D87018<p64>:word32] = SLICE(CONVERT(edx_183 - 1<32>, word32, uint64), word32, 0)
l0000000067D8105F:
	__lock()
	word64 rax_204
	__cmpxchg(Mem197[rbx_188:word64], 1<u64>, 0<u64>, out rax_204)
	branch rax_204 != 0<64> l0000000067D81058
l0000000067D81058:
	Sleep(0x3E8<u64>)
l0000000067D8106F:
	word64 rdi_212 = Mem197[0x0000000067D841F0<p64>:word64]
	branch SLICE(CONVERT(Mem197[rdi_212:word32], word32, uint64), word32, 0) == 2<32> l0000000067D81170
l0000000067D81170:
	fn0000000067D822B0(0x0000000067D87000<p64>)
	Mem225[rdi_212:word32] = 0<32>
	Mem227[rbx_188:word64] = rax_204
	rax_182 = 1<u64>
l0000000067D81081:
	_amsg_exit(0x1F<u64>)
	rax_182 = 1<u64>
l0000000067D81090:
	return SLICE(rax_182, word32, 0)
fn0000000067D81010_exit:


word32 fn0000000067D81200(word32 edx, selector gs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
// MayUse:  gs:[0..15] rdx:[0..31]
// LiveOut: rax
// Trashed: SCZO rax rcx rdx
// Preserved: r12 r13 r14 r8 rbx rsi rsp
fn0000000067D81200_entry:
	word32 edx = SLICE(rdx, word32, 0)
l0000000067D81200:
	word32 r14d_157
	word32 eax_118
	word64 rsi_19 = Mem17[0x0000000067D841D0<p64>:word64]
	Mem23[rsi_19:word32] = edx
	word64 r12_25 = CONVERT(edx, word32, uint64)
	word32 r12d_34 = SLICE(r12_25, word32, 0)
	branch edx != 0<32> l0000000067D81280
l0000000067D81280:
	fn0000000067D81800()
	eax_118 = SLICE(CONVERT(SLICE(r12_25 - 1<64>, word32, 0), word32, uint64), word32, 0) (alias)
	word64 rdx_36 = CONVERT(r12d_34, word32, uint64)
	branch eax_118 >u 1<32> l0000000067D81308
l0000000067D81308:
	fn0000000067D82140()
	r14d_157 = SLICE(CONVERT(eax_118, word32, uint64), word32, 0) (alias)
	branch r12d_34 != 3<32> l0000000067D81264
l0000000067D8131A:
l0000000067D81298:
	word32 eax_53 = SLICE(CONVERT(fn0000000067D81010(rdx_36, gs), uint32, uint64), word32, 0)
	branch eax_53 == 0<32> l0000000067D81261
l0000000067D812A1:
	fn0000000067D82130()
	r14d_157 = SLICE(CONVERT(eax_53, word32, uint64), word32, 0) (alias)
	branch eax_53 == 0<32> l0000000067D81320
l0000000067D81320:
	branch r12d_34 != 1<32> l0000000067D81261
l0000000067D8132A:
l0000000067D812B6:
	branch r12d_34 != 1<32> l0000000067D8132C
l0000000067D8132C:
	fn0000000067D82140()
	r14d_157 = SLICE(CONVERT(eax_53, word32, uint64), word32, 0) (alias)
l0000000067D812BC:
	fn0000000067D81530()
	fn0000000067D82140()
	r14d_157 = SLICE(CONVERT(eax_53, word32, uint64), word32, 0) (alias)
	branch eax_53 != 0<32> l0000000067D81264
l0000000067D812D8:
	fn0000000067D82140()
	fn0000000067D82130()
l0000000067D812F2:
	fn0000000067D81010(0<u64>, gs)
l0000000067D81222:
	eax_118 = SLICE(CONVERT(Mem23[0x0000000067D87018<p64>:word32], word32, uint64), word32, 0) (alias)
	branch eax_118 == 0<32> l0000000067D81261
l0000000067D8122C:
	fn0000000067D81800()
	fn0000000067D82140()
l0000000067D8123E:
	fn0000000067D82130()
	r14d_157 = SLICE(CONVERT(eax_118, word32, uint64), word32, 0) (alias)
	branch SLICE(CONVERT(fn0000000067D81010(CONVERT(r12d_34, word32, uint64), gs), uint32, uint64), word32, 0) != 0<32> l0000000067D81264
l0000000067D81261:
	r14d_157 = 0<32> (alias)
l0000000067D81264:
	Mem173[rsi_19:word32] = 0xFFFFFFFF<32>
	return SLICE(CONVERT(r14d_157, word32, uint64), word32, 0)
fn0000000067D81200_exit:


BOOL DllMain(HANDLE hModule, DWORD dwReason, LPVOID lpReserved)
// stackDelta: 8; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  gs:[0..15] rdx:[0..63]
// LiveOut: eax
// Trashed: eax
// Preserved:
DllMain_entry:
l0000000067D81350:
	Mem5[Mem0[0x0000000067D84240<p64>:word64]:word32] = 0<32>
l0000000067D8135D_thunk_fn0000000067D81200:
	return SLICE(CONVERT(fn0000000067D81200(dwReason, gs), uint32, uint64), BOOL, 0)
DllMain_exit:


void fn0000000067D81370(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0000000067D81530
//      fn0000000067D823C0
// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO rax rcx rdx
// Preserved: rsp
fn0000000067D81370_entry:
l0000000067D81370:
l0000000067D8137A_thunk_fn0000000067D821D0:
	fn0000000067D821D0(0x0000000067D87000<p64>, rcx)
	return
fn0000000067D81370_exit:


void fn0000000067D81380()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0000000067D823C0
// MayUse: 
// LiveOut:
// Trashed: SCZO rax rcx rdx
// Preserved: rsp
fn0000000067D81380_entry:
l0000000067D81380:
l0000000067D81387_thunk_fn0000000067D81370:
	fn0000000067D81370(0x0000000067D81390<p64>)
	return
fn0000000067D81380_exit:


void fn0000000067D81390()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: rsp
fn0000000067D81390_entry:
l0000000067D81390:
	return
fn0000000067D81390_exit:


void hexdump(word32 r8d)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      main
// MayUse:  r8d:[0..31]
// LiveOut:
// Trashed: SCZO rax rdx
// Preserved: rbp rsp
hexdump_entry:
l0000000067D813A0:
	Mem38[fp - 0x88<64> + CONVERT(SLICE(CONVERT(r8d, word32, uint64), word32, 0), word32, int64):byte] = 0x41<8>
	Mem46[fp - 0x88<64> + CONVERT(SLICE(CONVERT(SLICE(CONVERT(r8d, word32, uint64), word32, 0) + 1<32>, word32, uint64), word32, 0), word32, int64):byte] = 0x20<8>
	return
hexdump_exit:


void main(word32 ecx, word64 rdx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ecx:[0..31] rdx:[0..63]
// LiveOut:
// Trashed: SCZO r8 r9 rax rcx rdx
// Preserved: rbp rbx rsp
main_entry:
l0000000067D81422:
	fn0000000067D81530()
	strlen(Mem15[rdx:word64])
	hexdump(SLICE(CONVERT(ecx, word32, uint64), word32, 0))
	return
main_exit:


void fn0000000067D81480()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO rax rdx
// Preserved: rsp
fn0000000067D81480_entry:
l0000000067D81480:
	word64 rax_10 = Mem0[Mem0[0x0000000067D83010<p64>:word64]:word64]
	branch rax_10 == 0<64> l0000000067D814B5
l0000000067D81493:
l0000000067D81498:
	call rax_10 (retsize: 8;)
		uses: rdx:rax_16 + 8<64>
	word64 rax_16 = Mem15[0x0000000067D83010<p64>:word64]
	rax_10 = Mem15[rax_16 + 8<64>:word64]
	Mem19[0x0000000067D83010<p64>:word64] = rax_16 + 8<64>
	branch rax_10 != 0<64> l0000000067D81498
l0000000067D814B5:
	return
fn0000000067D81480_exit:


void fn0000000067D814C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0000000067D81530
// MayUse: 
// LiveOut:
// Trashed: SCZO r8 rax rcx rdx
// Preserved: rbx rsi rsp
fn0000000067D814C0_entry:
l0000000067D814C0:
	word64 rdx_10 = Mem8[0x0000000067D84180<p64>:word64]
	word32 eax_12 = Mem8[rdx_10:word32]
	word32 ecx_33 = SLICE(CONVERT(eax_12, word32, uint64), word32, 0)
	branch eax_12 == 0xFFFFFFFF<32> l0000000067D81510
l0000000067D81510:
	word64 rax_18 = 0<u64>
l0000000067D81518:
	word64 r8_24 = CONVERT(SLICE(rax_18 + 1<64>, word32, 0), word32, uint64)
	ecx_33 = SLICE(CONVERT(SLICE(rax_18, word32, 0), word32, uint64), word32, 0) (alias)
	rax_18 = r8_24
	branch Mem8[rdx_10 + r8_24 * 8<64>:word64] != 0<64> l0000000067D81518
l0000000067D81528:
l0000000067D814D7:
	branch ecx_33 == 0<32> l0000000067D814FB
l0000000067D814DB:
	word64 rax_40 = CONVERT(ecx_33, word32, uint64)
	word64 rbx_44 = rdx_10 + rax_40 * 8<64>
	word64 rsi_47 = rdx_10 - 8<64> + (rax_40 - CONVERT(ecx_33 - 1<32>, word32, uint64)) * 8<64>
l0000000067D814F0:
	word64 r8_54
	call fn9090909090909090 (retsize: 8;)
		uses: r8:r8_54
		defs: r8:r8_54
	rbx_44 = rbx_44 - 8<64>
	branch rbx_44 != rsi_47 l0000000067D814F0
l0000000067D814FB:
l0000000067D81508_thunk_fn0000000067D81370:
	fn0000000067D81370(0x0000000067D81480<p64>)
	return
fn0000000067D814C0_exit:


void fn0000000067D81530()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
//      main
// MayUse: 
// LiveOut:
// Trashed: SCZO r8 rax rcx rdx
// Preserved: rsp
fn0000000067D81530_entry:
l0000000067D81530:
	branch SLICE(CONVERT(Mem0[0x0000000067D87020<p64>:word32], word32, uint64), word32, 0) == 0<32> l0000000067D81540
l0000000067D81540:
	Mem10[0x0000000067D87020<p64>:word32] = 1<32>
l0000000067D8154A_thunk_fn0000000067D814C0:
	fn0000000067D814C0()
	return
l0000000067D8153A:
	return
fn0000000067D81530_exit:


void fn0000000067D81550(word32 edx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx:[0..31]
// LiveOut:
// Trashed: SCZO rax rcx
// Preserved: rsp
fn0000000067D81550_entry:
l0000000067D81550:
	branch edx == 3<32> l0000000067D81570
l0000000067D81559:
	branch edx == 0<32> l0000000067D81570
l0000000067D81570:
	fn0000000067D81C10(edx)
	return
l0000000067D8155D:
	return
fn0000000067D81550_exit:


word32 fn0000000067D81580(word32 edx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0000000067D81010
// MayUse:  edx:[0..31]
// LiveOut: edx
// Trashed: SCZO edx rax rcx
// Preserved: rbx rsi rsp
fn0000000067D81580_entry:
l0000000067D81580:
	word64 rax_10 = Mem8[0x0000000067D84170<p64>:word64]
	branch Mem8[rax_10:word32] == 2<32> l0000000067D81598
l0000000067D81592:
	Mem13[rax_10:word32] = 2<32>
l0000000067D81598:
	branch edx == 2<32> l0000000067D815B0
l0000000067D815B0:
	word64 rbx_18 = 0x0000000067D8A050<p64>
	branch 0x0000000067D8A050<p64> == 0x0000000067D8A050<p64> l0000000067D815A2
l0000000067D815C3:
l0000000067D815C8:
	word64 rax_24 = Mem62[rbx_18:word64]
	branch rax_24 == 0<64> l0000000067D815D2
l0000000067D815D0:
	word64 rcx_80
	call rax_24 (retsize: 8;)
		uses: edx:edx_29,rcx:rcx_80
		defs: edx:edx_32,rcx:rcx_80
l0000000067D815D2:
	rbx_18 = rbx_18 + 8<64>
	branch 0x0000000067D8A050<p64> != rbx_18 l0000000067D815C8
l0000000067D815DB:
	return edx
l0000000067D8159D:
	branch edx == 1<32> l0000000067D815F0
l0000000067D815F0:
	fn0000000067D81C10(edx)
	return edx
l0000000067D815A2:
	return edx
fn0000000067D81580_exit:


void fn0000000067D81610()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO rax
// Preserved: rsp
fn0000000067D81610_entry:
l0000000067D81610:
	return
fn0000000067D81610_exit:


void fn0000000067D81620(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0000000067D81690
//      fn0000000067D81800
// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO r12 r8 r9 rax rbx rcx rdx rsp
// Preserved:
fn0000000067D81620_entry:
l0000000067D81620:
	word64 rax_24 = fn0000000067D82330(2<32>)
	fwrite(0x0000000067D84060<p64>, 1<u64>, 0x1B<u64>, rax_24)
	word64 rcx_52
	call msvcrt.dll!vfprintf (retsize: 8;)
		uses: r8:fp + 0x10<64>,r9:rax_24,rcx:fn0000000067D82330(2<32>),rdx:rcx
		defs: rcx:rcx_52
	abort()
l0000000067D8168A_thunk_fn0000000067D81690:
	fn0000000067D81690(rcx_52)
	return
fn0000000067D81620_exit:


void fn0000000067D81690(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0000000067D81620
//      fn0000000067D81800
// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO r12 r8 r9 rax rbx rcx rdx rsi rsp
// Preserved:
fn0000000067D81690_entry:
l0000000067D81690:
	word64 rbx_182
	word64 rbx_13 = CONVERT(Mem11[0x0000000067D87064<p64>:word32], word32, int64)
	word32 ebx_16 = SLICE(rbx_13, word32, 0)
	branch ebx_16 <= 0<32> l0000000067D817C0
l0000000067D816AA:
	word64 rax_22 = Mem11[0x0000000067D87068<p64>:word64] + 0x18<64>
	word64 rcx_299 = 0<64>
l0000000067D816C0:
	word32 ecx_37 = SLICE(rcx_299, word32, 0)
	word64 rdx_26 = Mem11[rax_22:word64]
	branch rdx_26 >u rcx l0000000067D816DC
l0000000067D816C8:
	branch rcx <u rdx_26 + CONVERT(Mem11[Mem11[rax_22 + 8<64>:word64] + 8<64>:word32], word32, uint64) l0000000067D81763
l0000000067D816DC:
	rcx_299 = CONVERT(ecx_37 + 1<32>, word32, uint64)
	rax_22 = rax_22 + 0x28<64>
	rbx_182 = rbx_13 (alias)
	branch SLICE(rcx_299, word32, 0) != ebx_16 l0000000067D816C0
l0000000067D816E7:
	word64 rax_49 = fn0000000067D81E20(rcx)
	branch rax_49 == 0<64> l0000000067D817E2
l0000000067D816FB:
	word64 rbx_65 = rbx_182 * 5<64>
	word64 rax_67 = Mem62[0x0000000067D87068<p64>:word64] + (rbx_65 << 3<64>)
	Mem69[rax_67 + 0x20<64>:word64] = rax_49
	Mem70[rax_67:word32] = 0<32>
	word64 rax_72 = fn0000000067D81F50()
	word64 rax_85 = Mem70[0x0000000067D87068<p64>:word64]
	word64 rcx_84 = CONVERT(Mem70[rax_49 + 0xC<64>:word32], word32, uint64) + rax_72
	Mem86[rax_85 + 0x18<64> + (rbx_65 << 3<64>):word64] = rcx_84
	branch SEQ(SLICE(rax_85, word32, 32), VirtualQuery(rcx_84, fp - 0x48<64>, 0x30<u64>)) == 0<64> l0000000067D817C7
l0000000067D817C7:
	fn0000000067D81620(0x0000000067D840A0<p64>)
l0000000067D817E2:
	fn0000000067D81620(0x0000000067D84080<p64>)
l0000000067D817FD_thunk_fn0000000067D81800:
	fn0000000067D81800()
	return
l0000000067D81748:
	word64 rax_123 = CONVERT(dwLoc24, word32, uint64)
	word32 eax_142 = SLICE(rax_123, word32, 0)
	branch SLICE(CONVERT(SLICE(CONVERT(SLICE(rax_123 - 0x40<64>, word32, 0), word32, uint64), word32, 0) & 0xFFFFFFBF<32>, word32, uint64), word32, 0) == 0<32> l0000000067D8175C
l0000000067D81754:
	branch SLICE(CONVERT(SLICE(CONVERT(SLICE(rax_123 - 4<64>, word32, 0), word32, uint64), word32, 0) & 0xFFFFFFFB<32>, word32, uint64), word32, 0) != 0<32> l0000000067D81770
l0000000067D81770:
	word64 r8_147 = 4<u64>
	branch eax_142 == 2<32> l0000000067D8178C
l0000000067D81788_1:
	r8_147 = 0x40<64> (alias)
l0000000067D8178C:
	word64 rbx_155 = (rbx_65 << 3<64>) + Mem86[0x0000000067D87068<p64>:word64]
	Mem157[rbx_155 + 8<64>:word64] = qwLoc48
	Mem160[rbx_155 + 0x10<64>:word64] = qwLoc30
	branch VirtualProtect(qwLoc48, qwLoc30, r8_147, rbx_155) != 0<32> l0000000067D8175C
l0000000067D817A8:
	GetLastError()
	fn0000000067D81620(0x0000000067D840D8<p64>)
l0000000067D817C0:
	rbx_182 = 0<u64>
l0000000067D8175C:
	Mem188[0x0000000067D87064<p64>:word32] = Mem186[0x0000000067D87064<p64>:word32] + 1<32>
l0000000067D81763:
	return
fn0000000067D81690_exit:


void fn0000000067D81800()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
//      fn0000000067D81690
// MayUse: 
// LiveOut:
// Trashed: SCZO r12 r15 r8 r9 rax rbp rbx rcx rdi rdx rsi rsp
// Preserved: r13 r14
fn0000000067D81800_entry:
l0000000067D81800:
	word32 edi_31 = SLICE(CONVERT(Mem26[0x0000000067D87060<p64>:word32], word32, uint64), word32, 0)
	branch edi_31 == 0<32> l0000000067D81838
l0000000067D81838:
	Mem35[0x0000000067D87060<p64>:word32] = 1<32>
	word64 rax_46 = CONVERT(CONVERT(SLICE(CONVERT(fn0000000067D81EA0(), uint32, uint64), word32, 0), word32, int64) * 0x28<64> + 0xF<32>, word32, word64)
	fn0000000067D820F0(rax_46 & 0xFFFFFFFFFFFFFFF0<64>)
	word64 r12_54 = Mem35[0x0000000067D84190<p64>:word64]
	word64 rbx_102 = Mem35[0x0000000067D841A0<p64>:word64]
	Mem56[0x0000000067D87064<p64>:word32] = 0<32>
	Mem59[0x0000000067D87068<p64>:word64] = fp - 0x78<64> - (rax_46 & 0xFFFFFFFFFFFFFFF0<64>) + 0x20<64>
	word64 rax_61 = r12_54 - rbx_102
	branch rax_61 <= 7<64> l0000000067D81822
l0000000067D81891:
	word64 rax_621
	word64 rdx_620 = CONVERT(Mem59[rbx_102:word32], word32, uint64)
	word32 edx_68 = SLICE(rdx_620, word32, 0)
	branch rax_61 > 0xB<64> l0000000067D819C8
l0000000067D819C8:
	branch edx_68 != 0<32> l0000000067D81A40
l0000000067D819CC:
	rax_621 = CONVERT(Mem59[rbx_102 + 4<64>:word32], word32, uint64)
	branch SLICE(CONVERT(SLICE(CONVERT(SLICE(rax_621, word32, 0), word32, uint64), word32, 0) | Mem59[rbx_102 + 8<64>:word32], word32, uint64), word32, 0) != 0<32> l0000000067D818A8
l0000000067D819DA:
	rdx_620 = CONVERT(Mem59[rbx_102 + 0xC<64>:word32], word32, uint64)
	rbx_102 = rbx_102 + 0xC<64>
l0000000067D8189D:
	branch SLICE(rdx_620, word32, 0) != 0<32> l0000000067D81A40
l0000000067D818A5:
	rax_621 = CONVERT(Mem59[rbx_102 + 4<64>:word32], word32, uint64)
l0000000067D818A8:
	branch SLICE(rax_621, word32, 0) != 0<32> l0000000067D81A40
l0000000067D81A40:
	branch rbx_102 >=u r12_54 l0000000067D81822
l0000000067D81A49:
	word64 r14_111 = Mem59[0x0000000067D841C0<p64>:word64]
l0000000067D81A50:
	word64 rsi_120 = CONVERT(Mem113[rbx_102 + 4<64>:word32], word32, uint64) + r14_111
	word32 r13d_124 = SLICE(CONVERT(SLICE(CONVERT(Mem113[rbx_102:word32], word32, uint64), word32, 0) + Mem113[rsi_120:word32], word32, uint64), word32, 0)
	fn0000000067D81690(rsi_120)
	Mem138[rsi_120:word32] = r13d_124
	rbx_102 = rbx_102 + 8<64>
	branch rbx_102 <u r12_54 l0000000067D81A50
l0000000067D81A70:
l0000000067D818B0:
	branch SLICE(CONVERT(Mem59[rbx_102 + 8<64>:word32], word32, uint64), word32, 0) != 1<32> l0000000067D81A81
l0000000067D818BC:
	word64 rbx_146 = rbx_102 + 0xC<64>
	branch rbx_146 >=u r12_54 l0000000067D81822
l0000000067D818C9:
	word64 r13_149 = Mem59[0x0000000067D841C0<p64>:word64]
l0000000067D8190D:
	word64 rax_160 = CONVERT(Mem152[rbx_146:word32], word32, uint64) + r13_149
	word32 edx_163 = SLICE(CONVERT(CONVERT(Mem152[rbx_146 + 8<64>:byte], byte, word32), word32, uint64), word32, 0)
	word64 rsi_161 = CONVERT(Mem152[rbx_146 + 4<64>:word32], word32, uint64) + r13_149
	word64 r15_162 = Mem152[rax_160:word64]
	branch edx_163 == 0x20<32> l0000000067D81A18
l0000000067D81A18:
	word64 rdx_167 = CONVERT(Mem152[rsi_161:word32], word32, uint64)
	word64 rdx_170 = rdx_167 | 0xFFFFFFFF00000000<64>
	branch SLICE(rdx_167, word32, 0) < 0<32> l0000000067D81A26
l0000000067D81A22_1:
	rdx_170 = rdx_167
l0000000067D81A26:
	fn0000000067D81690(rsi_161)
	Mem202[rsi_161:word32] = SLICE(r15_162 + (rdx_170 - rax_160), word32, 0)
l0000000067D81928:
	branch edx_163 >u 0x20<32> l0000000067D819F0
l0000000067D819F0:
	branch edx_163 != 0x40<32> l0000000067D81A75
l0000000067D819F9:
	word64 r15_209 = r15_162 + (Mem152[rsi_161:word64] - rax_160)
	fn0000000067D81690(rsi_161)
	Mem217[rsi_161:word64] = r15_209
l0000000067D8192E:
	branch edx_163 == 8<32> l0000000067D818E0
l0000000067D818E0:
	word64 rdx_221 = CONVERT(CONVERT(Mem152[rsi_161:byte], byte, word32), word32, uint64)
	branch SLICE(rdx_221, byte, 0) >= 0<8> l0000000067D818F6
l0000000067D818F2_1:
	rdx_221 = rdx_221 | 0xFFFFFFFFFFFFFF00<64>
l0000000067D818F6:
	fn0000000067D81690(rcx_246)
	Mem251[rsi_161:byte] = SLICE(r15_162 + (rdx_221 - rax_160), byte, 0)
l0000000067D81904:
	rbx_146 = rbx_146 + 0xC<64>
	branch rbx_146 >=u r12_54 l0000000067D81970
l0000000067D81933:
	branch edx_163 != 0x10<32> l0000000067D81A75
l0000000067D81A75:
	fn0000000067D81620(0x0000000067D84138<p64>)
l0000000067D81A81:
	fn0000000067D81620(0x0000000067D84100<p64>)
l0000000067D81A8F_thunk_fn0000000067D81A90:
	fn0000000067D81A90()
	return
l0000000067D8193C:
	word64 rdx_312 = CONVERT(CONVERT(Mem152[rsi_161:word16], word16, word32), word32, uint64)
	branch SLICE(rdx_312, word16, 0) >= 0<16> l0000000067D81953
l0000000067D8194F_1:
	rdx_312 = rdx_312 | 0xFFFFFFFFFFFF0000<64>
l0000000067D81953:
	fn0000000067D81690(rcx_338)
	Mem343[rsi_161:word16] = SLICE(r15_162 + (rdx_312 - rax_160), word16, 0)
	rbx_146 = rbx_146 + 0xC<64>
	branch rbx_146 <u r12_54 l0000000067D8190D
l0000000067D8196B:
l0000000067D81970:
	branch SLICE(CONVERT(Mem346[0x0000000067D87064<p64>:word32], word32, uint64), word32, 0) <= 0<32> l0000000067D81822
l0000000067D8197E:
	word64 rbx_355 = 0<u64>
l0000000067D81990:
	word64 rax_365 = Mem346[0x0000000067D87068<p64>:word64] + rbx_355
	word64 r8_367 = CONVERT(Mem346[rax_365:word32], word32, uint64)
	branch SLICE(r8_367, word32, 0) == 0<32> l0000000067D819AF
l0000000067D819A2:
	VirtualProtect(Mem346[rax_365 + 8<64>:word64], Mem346[rax_365 + 0x10<64>:word64], r8_367, fp - 0x4C<64>)
l0000000067D819AF:
	edi_31 = SLICE(CONVERT(edi_31 + 1<32>, word32, uint64), word32, 0) (alias)
	rbx_355 = rbx_355 + 0x28<64>
	branch edi_31 < Mem346[0x0000000067D87064<p64>:word32] l0000000067D81990
l0000000067D819BE:
l0000000067D81822:
	return
fn0000000067D81800_exit:


void fn0000000067D81A90()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0000000067D81800
//      fn0000000067D81C10
// MayUse: 
// LiveOut:
// Trashed: SCZO rax rcx
// Preserved: r12 rbx rdi rsi rsp
fn0000000067D81A90_entry:
l0000000067D81A90:
	EnterCriticalSection(0x0000000067D870A0<p64>)
	word64 rbx_17 = Mem14[0x0000000067D87080<p64>:word64]
	branch rbx_17 == 0<64> l0000000067D81AE4
l0000000067D81AB2:
l0000000067D81AC0:
	word64 rax_27 = TlsGetValue(CONVERT(Mem14[rbx_17:word32], word32, uint64))
	branch GetLastError() != 0<32> l0000000067D81ADB
l0000000067D81ACD:
	branch rax_27 == 0<64> l0000000067D81ADB
l0000000067D81AD2:
	word64 rax_42
	call Mem14[rbx_17 + 8<64>:word64] (retsize: 8;)
		uses: rax:rax_42,rcx:rax_27
		defs: rax:rax_42
l0000000067D81ADB:
	rbx_17 = Mem14[rbx_17 + 0x10<64>:word64]
	branch rbx_17 != 0<64> l0000000067D81AC0
l0000000067D81AE4:
	LeaveCriticalSection(0x0000000067D870A0<p64>)
	return
fn0000000067D81A90_exit:


void fn0000000067D81B00(word32 ecx, word64 rdx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..31] rdx:[0..63]
// LiveOut:
// Trashed: SCZO rax rcx rdx
// Preserved: rbx rdi rsi rsp
fn0000000067D81B00_entry:
	word32 ecx = SLICE(rcx, word32, 0)
l0000000067D81B00:
	word32 edi_39 = SLICE(CONVERT(ecx, word32, uint64), word32, 0)
	branch SLICE(CONVERT(Mem11[0x0000000067D87088<p64>:word32], word32, uint64), word32, 0) != 0<32> l0000000067D81B20
l0000000067D81B20:
	word64 rax_28 = calloc(1<u64>, 0x18<u64>)
	branch rax_28 == 0<64> l0000000067D81B73
l0000000067D81B73:
l0000000067D81B37:
	Mem40[rax_28:word32] = edi_39
	Mem42[rax_28 + 8<64>:word64] = rdx
	EnterCriticalSection(0x0000000067D870A0<p64>)
	word64 rax_43 = Mem42[0x0000000067D87080<p64>:word64]
	Mem45[0x0000000067D87080<p64>:word64] = rax_28
	Mem46[rax_28 + 0x10<64>:word64] = rax_43
	LeaveCriticalSection(0x0000000067D870A0<p64>)
	return
l0000000067D81B16:
	return
fn0000000067D81B00_exit:


void fn0000000067D81B80(word32 ecx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..31]
// LiveOut:
// Trashed: SCZO rax rcx rdx
// Preserved: rbx rsp
fn0000000067D81B80_entry:
	word32 ecx = SLICE(rcx, word32, 0)
l0000000067D81B80:
	word32 ebx_65 = SLICE(CONVERT(ecx, word32, uint64), word32, 0)
	branch SLICE(CONVERT(Mem5[0x0000000067D87088<p64>:word32], word32, uint64), word32, 0) != 0<32> l0000000067D81BA0
l0000000067D81BA0:
	EnterCriticalSection(0x0000000067D870A0<p64>)
	word64 rcx_17 = Mem5[0x0000000067D87080<p64>:word64]
	branch rcx_17 == 0<64> l0000000067D81BE3
l0000000067D81BB9:
	word64 rdx_22 = 0<u64>
l0000000067D81BCB:
	word64 rax_33 = Mem5[rcx_17 + 0x10<64>:word64]
	branch SLICE(CONVERT(Mem5[rcx_17:word32], word32, uint64), word32, 0) != ebx_65 l0000000067D81BC0
l0000000067D81BC0:
	rdx_22 = rcx_17
	branch rax_33 == 0<64> l0000000067D81BE3
l0000000067D81BC8:
	rcx_17 = rax_33
l0000000067D81BD5:
	branch rdx_22 == 0<64> l0000000067D81C00
l0000000067D81C00:
	Mem44[0x0000000067D87080<p64>:word64] = rax_33
l0000000067D81BDA:
	Mem45[rdx_22 + 0x10<64>:word64] = rax_33
l0000000067D81BDE:
	free(rcx_17)
l0000000067D81BE3:
	LeaveCriticalSection(0x0000000067D870A0<p64>)
	return
l0000000067D81B91:
	return
fn0000000067D81B80_exit:


void fn0000000067D81C10(word32 edx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0000000067D81550
//      fn0000000067D81580
// MayUse:  edx:[0..31]
// LiveOut:
// Trashed: SCZO rax rcx
// Preserved: rbx rsp
fn0000000067D81C10_entry:
l0000000067D81C10:
	branch edx == 2<32> l0000000067D81C60
l0000000067D81C60:
	fn0000000067D820E0()
	return
l0000000067D81C1A:
	branch edx >u 2<32> l0000000067D81C48
l0000000067D81C48:
	branch edx != 3<32> l0000000067D81C38
l0000000067D81C4D:
	branch SLICE(CONVERT(Mem5[0x0000000067D87088<p64>:word32], word32, uint64), word32, 0) == 0<32> l0000000067D81C38
l0000000067D81C57:
	fn0000000067D81A90()
l0000000067D81C1C:
	branch edx == 0<32> l0000000067D81C70
l0000000067D81C70:
	branch SLICE(CONVERT(Mem5[0x0000000067D87088<p64>:word32], word32, uint64), word32, 0) != 0<32> l0000000067D81CD0
l0000000067D81CD0:
	fn0000000067D81A90()
l0000000067D81C7A:
	branch SLICE(CONVERT(Mem5[0x0000000067D87088<p64>:word32], word32, uint64), word32, 0) != 1<32> l0000000067D81C38
l0000000067D81C85:
	word64 rbx_52 = Mem5[0x0000000067D87080<p64>:word64]
	branch rbx_52 == 0<64> l0000000067D81CA9
l0000000067D81C91:
l0000000067D81C98:
	rbx_52 = Mem5[rbx_52 + 0x10<64>:word64]
	free(rbx_52)
	branch rbx_52 != 0<64> l0000000067D81C98
l0000000067D81CA9:
	Mem64[0x0000000067D87080<p64>:word64] = 0<64>
	Mem65[0x0000000067D87088<p64>:word32] = 0<32>
	DeleteCriticalSection(0x0000000067D870A0<p64>)
l0000000067D81C20:
	branch SLICE(CONVERT(Mem5[0x0000000067D87088<p64>:word32], word32, uint64), word32, 0) == 0<32> l0000000067D81CE0
l0000000067D81CE0:
	InitializeCriticalSection(0x0000000067D870A0<p64>)
l0000000067D81C2E:
	Mem73[0x0000000067D87088<p64>:word32] = 1<32>
l0000000067D81C38:
	return
fn0000000067D81C10_exit:


void fn0000000067D81D00(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO rax rcx rdx
// Preserved: rsp
fn0000000067D81D00_entry:
l0000000067D81D00:
	branch Mem0[rcx:word16] != 0x5A4D<16> l0000000067D81D18
l0000000067D81D09:
	branch Mem0[rcx + CONVERT(Mem0[rcx + 0x3C<64>:word32], word32, int64):word32] == 0x4550<32> l0000000067D81D20
l0000000067D81D20:
	return
l0000000067D81D18:
	return
fn0000000067D81D00_exit:


void fn0000000067D81D30(word64 rcx, word64 rdx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..63] rdx:[0..63]
// LiveOut:
// Trashed: SCZO r8 r9 rax rcx rdx
// Preserved: rsp
fn0000000067D81D30_entry:
l0000000067D81D30:
	word64 rdx_8 = CONVERT(Mem0[rcx + 0x3C<64>:word32], word32, int64) + rcx
	word64 rax_11 = rdx_8 + 0x18<64> + CONVERT(CONVERT(Mem0[rdx_8 + 0x14<64>:word16], word16, word32), word32, uint64)
	word32 edx_14 = SLICE(CONVERT(CONVERT(Mem0[rdx_8 + 6<64>:word16], word16, word32), word32, uint64), word32, 0)
	branch edx_14 == 0<32> l0000000067D81D7C
l0000000067D81D4C:
	word64 r9_23 = rax_11 + 0x28<64> + CONVERT(edx_14 - 1<32>, word32, uint64) * 0x28<64>
l0000000067D81D60:
	word64 rcx_27 = CONVERT(Mem0[rax_11 + 0xC<64>:word32], word32, uint64)
	word32 edx_32 = SLICE(rcx_27, word32, 0)
	branch rcx_27 >u rdx l0000000067D81D73
l0000000067D81D6B:
	branch CONVERT(edx_32 + Mem0[rax_11 + 8<64>:word32], word32, uint64) >u rdx l0000000067D81D7E
l0000000067D81D73:
	rax_11 = rax_11 + 0x28<64>
	branch rax_11 != r9_23 l0000000067D81D60
l0000000067D81D7C:
l0000000067D81D7E:
	return
fn0000000067D81D30_exit:


void fn0000000067D81D80(word32 rax_32_32, word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax_32_32:[0..31] rcx:[0..63]
// LiveOut:
// Trashed: SCZO r8 rax rcx rdx
// Preserved: r12 rbx rsi rsp
fn0000000067D81D80_entry:
l0000000067D81D80:
	branch SEQ(rax_32_32, strlen(rcx)) >u 8<64> l0000000067D81E10
l0000000067D81D96:
	word64 rdx_20 = Mem11[0x0000000067D841C0<p64>:word64]
	branch Mem11[rdx_20:word16] != 0x5A4D<16> l0000000067D81DFE
l0000000067D81DA7:
	word64 rax_26 = CONVERT(Mem11[rdx_20 + 0x3C<64>:word32], word32, int64) + rdx_20
	branch Mem11[rax_26:word32] != 0x4550<32> l0000000067D81DFE
l0000000067D81DB6:
	branch Mem11[rax_26 + 0x18<64>:word16] != 0x20B<16> l0000000067D81DFE
l0000000067D81DBE:
	word64 r12_33 = rax_26 + 0x18<64> + CONVERT(CONVERT(Mem11[rax_26 + 0x14<64>:word16], word16, word32), word32, uint64)
	word32 eax_36 = SLICE(CONVERT(CONVERT(Mem11[rax_26 + 6<64>:word16], word16, word32), word32, uint64), word32, 0)
	branch eax_36 == 0<32> l0000000067D81E10
l0000000067D81DCF:
	word64 rsi_45 = r12_33 + 0x28<64> + CONVERT(eax_36 - 1<32>, word32, uint64) * 0x28<64>
l0000000067D81DE9:
	branch strncmp(r12_33, rcx, 8<u64>) != 0<32> l0000000067D81DE0
l0000000067D81DE0:
	r12_33 = r12_33 + 0x28<64>
	branch r12_33 == rsi_45 l0000000067D81E10
l0000000067D81E10:
	return
l0000000067D81DFE:
	return
fn0000000067D81D80_exit:


word64 fn0000000067D81E20(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0000000067D81690
// MayUse:  rcx:[0..63]
// LiveOut: rax
// Trashed: SCZO r8 r9 rax rcx rdx
// Preserved: rsp
fn0000000067D81E20_entry:
l0000000067D81E20:
	word64 rdx_4 = Mem0[0x0000000067D841C0<p64>:word64]
	word64 rax_21 = 0<u64>
	branch Mem0[rdx_4:word16] != 0x5A4D<16> l0000000067D81E40
l0000000067D81E30:
	word64 r8_10 = CONVERT(Mem0[rdx_4 + 0x3C<64>:word32], word32, int64) + rdx_4
	branch Mem0[r8_10:word32] == 0x4550<32> l0000000067D81E48
l0000000067D81E48:
	branch Mem0[r8_10 + 0x18<64>:word16] != 0x20B<16> l0000000067D81E40
l0000000067D81E51:
	word64 rcx_18 = rcx - rdx_4
	word32 edx_22 = SLICE(CONVERT(CONVERT(Mem0[r8_10 + 6<64>:word16], word16, word32), word32, uint64), word32, 0)
	rax_21 = r8_10 + 0x18<64> + CONVERT(CONVERT(Mem0[r8_10 + 0x14<64>:word16], word16, word32), word32, uint64)
	branch edx_22 == 0<32> l0000000067D81E95
l0000000067D81E67:
	word64 r9_31 = rax_21 + 0x28<64> + CONVERT(edx_22 - 1<32>, word32, uint64) * 0x28<64>
l0000000067D81E78:
	word64 r8_35 = CONVERT(Mem0[rax_21 + 0xC<64>:word32], word32, uint64)
	word32 edx_40 = SLICE(r8_35, word32, 0)
	branch rcx_18 <u r8_35 l0000000067D81E8C
l0000000067D81E84:
	branch rcx_18 <u CONVERT(edx_40 + Mem0[rax_21 + 8<64>:word32], word32, uint64) l0000000067D81E40
l0000000067D81E8C:
	rax_21 = rax_21 + 0x28<64>
	branch rax_21 != r9_31 l0000000067D81E78
l0000000067D81E95:
	return 0<u64>
l0000000067D81E40:
	return rax_21
fn0000000067D81E20_exit:


word32 fn0000000067D81EA0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0000000067D81800
// MayUse: 
// LiveOut: rax
// Trashed: SCZO r8 rax rdx
// Preserved: rsp
fn0000000067D81EA0_entry:
l0000000067D81EA0:
	word64 rax_4 = Mem0[0x0000000067D841C0<p64>:word64]
	branch Mem0[rax_4:word16] != 0x5A4D<16> l0000000067D81EC0
l0000000067D81EB1:
	word64 rax_10 = rax_4 + CONVERT(Mem0[rax_4 + 0x3C<64>:word32], word32, int64)
	branch Mem0[rax_10:word32] == 0x4550<32> l0000000067D81EC8
l0000000067D81EC8:
	branch Mem0[rax_10 + 0x18<64>:word16] != 0x20B<16> l0000000067D81EC0
l0000000067D81ED0:
	return SLICE(CONVERT(SLICE(CONVERT(CONVERT(Mem0[rax_10 + 6<64>:word16], word16, word32), word32, uint64), word32, 0), word32, uint64), word32, 0)
l0000000067D81EC0:
	return 0<32>
fn0000000067D81EA0_exit:


void fn0000000067D81EE0(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO r8 rax rcx rdx
// Preserved: rsp
fn0000000067D81EE0_entry:
l0000000067D81EE0:
	word64 r8_4 = Mem0[0x0000000067D841C0<p64>:word64]
	branch Mem0[r8_4:word16] != 0x5A4D<16> l0000000067D81F00
l0000000067D81EF1:
	word64 rdx_10 = CONVERT(Mem0[r8_4 + 0x3C<64>:word32], word32, int64) + r8_4
	branch Mem0[rdx_10:word32] == 0x4550<32> l0000000067D81F08
l0000000067D81F08:
	branch Mem0[rdx_10 + 0x18<64>:word16] != 0x20B<16> l0000000067D81F00
l0000000067D81F10:
	word64 rax_17 = rdx_10 + 0x18<64> + CONVERT(CONVERT(Mem0[rdx_10 + 0x14<64>:word16], word16, word32), word32, uint64) + 0x27<64>
	word32 edx_20 = SLICE(CONVERT(CONVERT(Mem0[rdx_10 + 6<64>:word16], word16, word32), word32, uint64), word32, 0)
	branch edx_20 == 0<32> l0000000067D81F48
l0000000067D81F21:
	word64 rdx_29 = rax_17 + 0x28<64> + CONVERT(edx_20 - 1<32>, word32, uint64) * 0x28<64>
l0000000067D81F30:
	branch (Mem0[rax_17 + 0<64>:byte] & 0x20<8>) == 0<8> l0000000067D81F3F
l0000000067D81F36:
	branch rcx == 0<64> l0000000067D81F00
l0000000067D81F3B:
	rcx = rcx - 1<64>
l0000000067D81F3F:
	rax_17 = rax_17 + 0x28<64>
	branch rax_17 != rdx_29 l0000000067D81F30
l0000000067D81F48:
	return
l0000000067D81F00:
	return
fn0000000067D81EE0_exit:


word64 fn0000000067D81F50()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0000000067D81690
// MayUse: 
// LiveOut: rax
// Trashed: SCZO r8 rax rdx
// Preserved: rsp
fn0000000067D81F50_entry:
l0000000067D81F50:
	word64 rax_4 = Mem0[0x0000000067D841C0<p64>:word64]
	word64 r8_15 = 0<u64>
	branch Mem0[rax_4:word16] != 0x5A4D<16> l0000000067D81F70
l0000000067D81F61:
	word64 rdx_10 = CONVERT(Mem0[rax_4 + 0x3C<64>:word32], word32, int64) + rax_4
	branch Mem0[rdx_10:word32] == 0x4550<32> l0000000067D81F78
l0000000067D81F78:
	branch Mem0[rdx_10 + 0x18<64>:word16] != 0x20B<16> l0000000067D81F82
l0000000067D81F7E_1:
	r8_15 = rax_4
l0000000067D81F82:
	return r8_15
l0000000067D81F70:
	return 0<u64>
fn0000000067D81F50_exit:


void fn0000000067D81F90(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO r8 r9 rax rcx rdx
// Preserved: rsp
fn0000000067D81F90_entry:
l0000000067D81F90:
	word64 rax_4 = Mem0[0x0000000067D841C0<p64>:word64]
	branch Mem0[rax_4:word16] != 0x5A4D<16> l0000000067D81FB0
l0000000067D81FA1:
	word64 rdx_10 = CONVERT(Mem0[rax_4 + 0x3C<64>:word32], word32, int64) + rax_4
	branch Mem0[rdx_10:word32] == 0x4550<32> l0000000067D81FB8
l0000000067D81FB8:
	branch Mem0[rdx_10 + 0x18<64>:word16] != 0x20B<16> l0000000067D81FB0
l0000000067D81FC0:
	word64 rcx_16 = rcx - rax_4
	word64 rax_19 = rdx_10 + 0x18<64> + CONVERT(CONVERT(Mem0[rdx_10 + 0x14<64>:word16], word16, word32), word32, uint64)
	word32 edx_22 = SLICE(CONVERT(CONVERT(Mem0[rdx_10 + 6<64>:word16], word16, word32), word32, uint64), word32, 0)
	branch edx_22 == 0<32> l0000000067D81FB0
l0000000067D81FD4:
	word64 r9_31 = rax_19 + 0x28<64> + CONVERT(edx_22 - 1<32>, word32, uint64) * 0x28<64>
l0000000067D81FE0:
	word64 r8_35 = CONVERT(Mem0[rax_19 + 0xC<64>:word32], word32, uint64)
	word32 edx_40 = SLICE(r8_35, word32, 0)
	branch rcx_16 <u r8_35 l0000000067D81FF4
l0000000067D81FEC:
	branch rcx_16 <u CONVERT(edx_40 + Mem0[rax_19 + 8<64>:word32], word32, uint64) l0000000067D82008
l0000000067D82008:
	return
l0000000067D81FF4:
	rax_19 = rax_19 + 0x28<64>
	branch r9_31 != rax_19 l0000000067D81FE0
l0000000067D81FFD:
	return
l0000000067D81FB0:
	return
fn0000000067D81F90_exit:


void fn0000000067D82020(word32 ecx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..31]
// LiveOut:
// Trashed: SCZO r10 r11 r8 r9 rax rcx rdx
// Preserved: rsp
fn0000000067D82020_entry:
l0000000067D82020:
	word64 r11_4 = Mem0[0x0000000067D841C0<p64>:word64]
	branch Mem0[r11_4:word16] != 0x5A4D<16> l0000000067D82042
l0000000067D82032:
	word64 r8_10 = CONVERT(Mem0[r11_4 + 0x3C<64>:word32], word32, int64) + r11_4
	branch Mem0[r8_10:word32] == 0x4550<32> l0000000067D82050
l0000000067D82050:
	branch Mem0[r8_10 + 0x18<64>:word16] != 0x20B<16> l0000000067D82042
l0000000067D82059:
	word64 rax_16 = CONVERT(Mem0[r8_10 + 0x90<64>:word32], word32, uint64)
	branch SLICE(rax_16, word32, 0) == 0<32> l0000000067D82042
l0000000067D82064:
	word64 rdx_23 = r8_10 + 0x18<64> + CONVERT(CONVERT(Mem0[r8_10 + 0x14<64>:word16], word16, word32), word32, uint64)
	word32 r8d_26 = SLICE(CONVERT(CONVERT(Mem0[r8_10 + 6<64>:word16], word16, word32), word32, uint64), word32, 0)
	branch r8d_26 == 0<32> l0000000067D82042
l0000000067D82078:
	word64 r10_35 = rdx_23 + 0x28<64> + CONVERT(r8d_26 - 1<32>, word32, uint64) * 0x28<64>
l0000000067D82088:
	word64 r9_39 = CONVERT(Mem0[rdx_23 + 0xC<64>:word32], word32, uint64)
	word32 r8d_44 = SLICE(r9_39, word32, 0)
	branch rax_16 <u r9_39 l0000000067D8209D
l0000000067D82094:
	branch rax_16 <u CONVERT(r8d_44 + Mem0[rdx_23 + 8<64>:word32], word32, uint64) l0000000067D820B0
l0000000067D820B0:
	word64 rax_50 = rax_16 + r11_4
l0000000067D820BF:
	word32 ecx_67 = SLICE(rcx, word32, 0)
	branch SLICE(CONVERT(Mem0[rax_50 + 4<64>:word32], word32, uint64), word32, 0) != 0<32> l0000000067D820CF
l0000000067D820C8:
	branch SLICE(CONVERT(Mem0[rax_50 + 0xC<64>:word32], word32, uint64), word32, 0) == 0<32> l0000000067D820A6
l0000000067D820CF:
	branch ecx_67 > 0<32> l0000000067D820B8
l0000000067D820B8:
	rcx = CONVERT(ecx_67 - 1<32>, word32, uint64)
	rax_50 = rax_50 + 0x14<64>
l0000000067D820D3:
	return
l0000000067D8209D:
	rdx_23 = rdx_23 + 0x28<64>
	branch r10_35 != rdx_23 l0000000067D82088
l0000000067D820A6:
	return
l0000000067D82042:
	return
fn0000000067D82020_exit:


void fn0000000067D820E0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0000000067D81C10
// MayUse: 
// LiveOut:
// Trashed:
// Preserved: rsp
fn0000000067D820E0_entry:
l0000000067D820E0:
	__fninit()
	return
fn0000000067D820E0_exit:


void fn0000000067D820F0(word64 rax)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0000000067D81800
// MayUse:  rax:[0..63]
// LiveOut:
// Trashed: SCZO
// Preserved: rax rcx rsp
fn0000000067D820F0_entry:
l0000000067D820F0:
	word64 rcx_10 = fp + 8<64>
	branch rax <u 0x1000<64> l0000000067D82118
l0000000067D820FF:
	rcx_10 = rcx_10 - 0x1000<64>
	Mem16[rcx_10:word64] = Mem14[rcx_10:word64]
	rax = rax - 0x1000<64>
	branch rax >u 0x1000<64> l0000000067D820FF
l0000000067D82118:
	word64 rcx_24 = rcx_10 - rax
	Mem27[rcx_24:word64] = Mem25[rcx_24:word64]
	return
fn0000000067D820F0_exit:


void fn0000000067D82130()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
// MayUse: 
// LiveOut:
// Trashed: rax
// Preserved: rsp
fn0000000067D82130_entry:
l0000000067D82130:
	return
fn0000000067D82130_exit:


void fn0000000067D82140()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
// MayUse: 
// LiveOut:
// Trashed: rax
// Preserved: rsp
fn0000000067D82140_entry:
l0000000067D82140:
	return
fn0000000067D82140_exit:


void fn0000000067D821A0(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0000000067D81000
// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO rax
// Preserved: rsp
fn0000000067D821A0_entry:
l0000000067D821A0:
	branch rcx == 0<64> l0000000067D821BF
l0000000067D821BF:
	return
l0000000067D821A5:
	Mem14[rcx + 0x10<64>:word64] = 0<64>
	Mem15[rcx + 8<64>:word64] = 0<64>
	Mem16[rcx:word64] = 0<64>
	return
fn0000000067D821A0_exit:


void fn0000000067D821D0(word64 rcx, word64 rdx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0000000067D81370
// MayUse:  rcx:[0..63] rdx:[0..63]
// LiveOut:
// Trashed: SCZO rax
// Preserved: rbp rbx rcx rdi rdx rsi rsp
fn0000000067D821D0_entry:
l0000000067D821D0:
	branch rcx == 0<64> l0000000067D8228B
l0000000067D8228B:
l0000000067D821E7:
	word64 rax_37
	word64 rdx_34
	word64 rdx_42
	call lock (retsize: 8;)
		uses: rcx:8<u64>,rdx:rdx
	branch Mem14[rcx:word64] == 0<64> l0000000067D82260
l0000000067D82260:
	rax_37 = calloc(0x20<u64>, 8<u64>)
	Mem38[rcx:word64] = rax_37
	rdx_34 = 8<u64>
	branch rax_37 == 0<64> l0000000067D82292
l0000000067D82277:
	Mem43[rcx + 8<64>:word64] = rax_37
	Mem44[rcx + 0x10<64>:word64] = rax_37 + 0x100<64>
	rdx_42 = rax_37 + 0x100<64>
l0000000067D821F7:
	rax_37 = Mem14[rcx + 8<64>:word64]
	rdx_42 = Mem14[rcx + 0x10<64>:word64]
l0000000067D821FF:
	branch rdx_42 == rax_37 l0000000067D82228
l0000000067D82228:
	word64 rcx_53 = Mem52[rcx:word64]
	word64 rax_54 = rax_37 - rcx_53
	word64 rdx_58 = rax_54 >> 3<64> << 4<64>
	word64 rax_60 = realloc(rcx_53, rdx_58)
	rdx_34 = rax_60
	branch rax_60 == 0<64> l0000000067D82292
l0000000067D82292:
	call unlock (retsize: 8;)
		uses: rcx:8<u64>,rdx:rdx_72
l0000000067D8224C:
	Mem86[rcx:word64] = rax_60
	Mem89[rcx + 0x10<64>:word64] = rax_60 + rdx_58
	rax_37 = rax_60 + rax_54
l0000000067D82204:
	word64 rdx_91 = rax_37 + 8<64>
	Mem95[rcx + 8<64>:word64] = rdx_91
	Mem97[rax_37:word64] = rdx
	call unlock (retsize: 8;)
		uses: rcx:8<u64>,rdx:rdx_91
l0000000067D8221B:
	return
fn0000000067D821D0_exit:


void fn0000000067D822B0(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0000000067D81010
// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO rax rcx
// Preserved: r12 rbx rsi rsp
fn0000000067D822B0_entry:
l0000000067D822B0:
	call lock (retsize: 8;)
		uses: rcx:8<u64>
	word64 r12_21 = Mem11[rcx:word64]
	word64 rbx_22 = Mem11[rcx + 8<64>:word64]
	Mem23[rcx + 0x10<64>:word64] = 0<64>
	Mem24[rcx + 8<64>:word64] = 0<64>
	Mem27[rcx:word64] = 0<64>
	word64 rcx_28
	call unlock (retsize: 8;)
		uses: rcx:8<u64>
		defs: rcx:rcx_28
	branch r12_21 == 0<64> l0000000067D82316
l0000000067D822F2:
	rbx_22 = rbx_22 - 8<64>
	branch r12_21 >u rbx_22 l0000000067D8230E
l0000000067D822FB:
	word64 rax_41 = Mem27[rbx_22:word64]
	branch rax_41 == 0<64> l0000000067D822F2
l0000000067D82303:
	call rax_41 (retsize: 8;)
		uses: rcx:rcx_47
		defs: rcx:rcx_49
	rbx_22 = rbx_22 - 8<64>
	branch r12_21 <=u rbx_22 l0000000067D822FB
l0000000067D8230E:
	free(r12_21)
l0000000067D82316:
	return
fn0000000067D822B0_exit:


word64 fn0000000067D82330(word32 ecx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn0000000067D81620
// MayUse:  ecx:[0..31]
// LiveOut: rax
// Trashed: SCZO rax rcx rdx
// Preserved: rbx rsp
fn0000000067D82330_entry:
l0000000067D82330:
	word64 rax_13
	call _iob_func (retsize: 8;)
		uses: ecx:ecx
		defs: rax:rax_13
	return rax_13 + CONVERT(SLICE(CONVERT(ecx, word32, uint64), word32, 0), word32, uint64) * 0x30<64>
fn0000000067D82330_exit:


void fn0000000067D823C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO rax rcx rdx
// Preserved: rsp
fn0000000067D823C0_entry:
l0000000067D823C0:
l0000000067D823C0_thunk_fn0000000067D81380:
	fn0000000067D81380()
	return
fn0000000067D823C0_exit:


