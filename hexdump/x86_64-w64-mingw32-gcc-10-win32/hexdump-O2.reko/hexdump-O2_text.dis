void fn000000006EC01000()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO rax rcx
// Preserved: rsp
fn000000006EC01000_entry:
l000000006EC01000:
l000000006EC01007_thunk_fn000000006EC020D0:
	fn000000006EC020D0(0x000000006EC07000<p64>)
	return
fn000000006EC01000_exit:


word32 fn000000006EC01010(word32 edx, selector gs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
// MayUse:  gs:[0..15] rdx:[0..31]
// LiveOut: rax
// Trashed: SCZO rax rcx rdx
// Preserved: r12 r13 r8 rbp rbx rdi rsi rsp
fn000000006EC01010_entry:
	word32 edx = SLICE(rdx, word32, 0)
l000000006EC01010:
	branch edx != 0<32> l000000006EC010A0
l000000006EC010A0:
	branch edx != 1<32> l000000006EC01158
l000000006EC01158:
	return 1<32>
l000000006EC010A9:
	word64 rbx_50 = Mem20[0x000000006EC041E0<p64>:word64]
	word64 rsi_51 = Mem20[Mem20[gs:0x30<32>:word64] + 8<64>:word64]
l000000006EC010E0:
	word32 edi_109
	__lock()
	word64 rax_63
	__cmpxchg(Mem20[rbx_50:word64], rsi_51, 0<u64>, out rax_63)
	branch rax_63 != 0<64> l000000006EC010D0
l000000006EC010D0:
	branch rsi_51 == rax_63 l000000006EC01190
l000000006EC01190:
	edi_109 = 1<32> (alias)
l000000006EC010D9:
	Sleep(0x3E8<u64>)
l000000006EC010ED:
	edi_109 = 0<32> (alias)
l000000006EC010EF:
	word64 rsi_80 = Mem20[0x000000006EC041F0<p64>:word64]
	branch SLICE(CONVERT(Mem20[rsi_80:word32], word32, uint64), word32, 0) == 1<32> l000000006EC011F0
l000000006EC011F0:
	_amsg_exit(0x1F<u64>)
l000000006EC01101:
	branch SLICE(CONVERT(Mem20[rsi_80:word32], word32, uint64), word32, 0) == 0<32> l000000006EC011B0
l000000006EC011B0:
	word64 rdx_94 = Mem20[0x000000006EC04230<p64>:word64]
	word64 rcx_95 = Mem20[0x000000006EC04220<p64>:word64]
	Mem96[rsi_80:word32] = 1<32>
	_initterm(rcx_95, rdx_94)
l000000006EC0110B:
	branch SLICE(CONVERT(Mem98[rsi_80:word32], word32, uint64), word32, 0) == 1<32> l000000006EC011D0
l000000006EC011D0:
	_initterm(Mem98[0x000000006EC04200<p64>:word64], Mem98[0x000000006EC04210<p64>:word64])
	Mem106[rsi_80:word32] = 2<32>
l000000006EC01116:
	branch edi_109 == 0<32> l000000006EC011A0
l000000006EC011A0:
	Mem124[rbx_50:word64] = 0<u64>
l000000006EC0111E:
	branch Mem126[Mem126[0x000000006EC041B0<p64>:word64]:word64] == 0<64> l000000006EC0113A
l000000006EC0112D:
	fn000000006EC014B0(2<32>)
l000000006EC0113A:
	Mem156[0x000000006EC07018<p64>:word32] = Mem126[0x000000006EC07018<p64>:word32] + 1<32>
	return 1<32>
l000000006EC01026:
	word32 edx_183 = SLICE(CONVERT(Mem20[0x000000006EC07018<p64>:word32], word32, uint64), word32, 0)
	word64 rax_182 = 0<u64>
	branch edx_183 <= 0<32> l000000006EC01090
l000000006EC01032:
	word64 rbx_188 = Mem20[0x000000006EC041E0<p64>:word64]
	Mem197[0x000000006EC07018<p64>:word32] = SLICE(CONVERT(edx_183 - 1<32>, word32, uint64), word32, 0)
l000000006EC0105F:
	__lock()
	word64 rax_204
	__cmpxchg(Mem197[rbx_188:word64], 1<u64>, 0<u64>, out rax_204)
	branch rax_204 != 0<64> l000000006EC01058
l000000006EC01058:
	Sleep(0x3E8<u64>)
l000000006EC0106F:
	word64 rdi_212 = Mem197[0x000000006EC041F0<p64>:word64]
	branch SLICE(CONVERT(Mem197[rdi_212:word32], word32, uint64), word32, 0) == 2<32> l000000006EC01170
l000000006EC01170:
	fn000000006EC021E0(0x000000006EC07000<p64>)
	Mem225[rdi_212:word32] = 0<32>
	Mem227[rbx_188:word64] = rax_204
	rax_182 = 1<u64>
l000000006EC01081:
	_amsg_exit(0x1F<u64>)
	rax_182 = 1<u64>
l000000006EC01090:
	return SLICE(rax_182, word32, 0)
fn000000006EC01010_exit:


word32 fn000000006EC01200(word32 edx, selector gs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
// MayUse:  gs:[0..15] rdx:[0..31]
// LiveOut: rax
// Trashed: SCZO rax rcx rdx
// Preserved: r12 r13 r14 r8 rbx rsi rsp
fn000000006EC01200_entry:
	word32 edx = SLICE(rdx, word32, 0)
l000000006EC01200:
	word32 r14d_157
	word32 eax_118
	word64 rsi_19 = Mem17[0x000000006EC041D0<p64>:word64]
	Mem23[rsi_19:word32] = edx
	word64 r12_25 = CONVERT(edx, word32, uint64)
	word32 r12d_34 = SLICE(r12_25, word32, 0)
	branch edx != 0<32> l000000006EC01280
l000000006EC01280:
	fn000000006EC01730()
	eax_118 = SLICE(CONVERT(SLICE(r12_25 - 1<64>, word32, 0), word32, uint64), word32, 0) (alias)
	word64 rdx_36 = CONVERT(r12d_34, word32, uint64)
	branch eax_118 >u 1<32> l000000006EC01308
l000000006EC01308:
	fn000000006EC02070()
	r14d_157 = SLICE(CONVERT(eax_118, word32, uint64), word32, 0) (alias)
	branch r12d_34 != 3<32> l000000006EC01264
l000000006EC0131A:
l000000006EC01298:
	word32 eax_53 = SLICE(CONVERT(fn000000006EC01010(rdx_36, gs), uint32, uint64), word32, 0)
	branch eax_53 == 0<32> l000000006EC01261
l000000006EC012A1:
	fn000000006EC02060()
	r14d_157 = SLICE(CONVERT(eax_53, word32, uint64), word32, 0) (alias)
	branch eax_53 == 0<32> l000000006EC01320
l000000006EC01320:
	branch r12d_34 != 1<32> l000000006EC01261
l000000006EC0132A:
l000000006EC012B6:
	branch r12d_34 != 1<32> l000000006EC0132C
l000000006EC0132C:
	fn000000006EC02070()
	r14d_157 = SLICE(CONVERT(eax_53, word32, uint64), word32, 0) (alias)
l000000006EC012BC:
	fn000000006EC01460()
	fn000000006EC02070()
	r14d_157 = SLICE(CONVERT(eax_53, word32, uint64), word32, 0) (alias)
	branch eax_53 != 0<32> l000000006EC01264
l000000006EC012D8:
	fn000000006EC02070()
	fn000000006EC02060()
l000000006EC012F2:
	fn000000006EC01010(0<u64>, gs)
l000000006EC01222:
	eax_118 = SLICE(CONVERT(Mem23[0x000000006EC07018<p64>:word32], word32, uint64), word32, 0) (alias)
	branch eax_118 == 0<32> l000000006EC01261
l000000006EC0122C:
	fn000000006EC01730()
	fn000000006EC02070()
l000000006EC0123E:
	fn000000006EC02060()
	r14d_157 = SLICE(CONVERT(eax_118, word32, uint64), word32, 0) (alias)
	branch SLICE(CONVERT(fn000000006EC01010(CONVERT(r12d_34, word32, uint64), gs), uint32, uint64), word32, 0) != 0<32> l000000006EC01264
l000000006EC01261:
	r14d_157 = 0<32> (alias)
l000000006EC01264:
	Mem173[rsi_19:word32] = 0xFFFFFFFF<32>
	return SLICE(CONVERT(r14d_157, word32, uint64), word32, 0)
fn000000006EC01200_exit:


BOOL DllMain(HANDLE hModule, DWORD dwReason, LPVOID lpReserved)
// stackDelta: 8; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  gs:[0..15] rdx:[0..63]
// LiveOut: eax
// Trashed: eax
// Preserved:
DllMain_entry:
l000000006EC01350:
	Mem5[Mem0[0x000000006EC04240<p64>:word64]:word32] = 0<32>
l000000006EC0135D_thunk_fn000000006EC01200:
	return SLICE(CONVERT(fn000000006EC01200(dwReason, gs), uint32, uint64), BOOL, 0)
DllMain_exit:


void fn000000006EC01370(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006EC01460
//      fn000000006EC02300
// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO rax rcx rdx
// Preserved: rsp
fn000000006EC01370_entry:
l000000006EC01370:
l000000006EC0137A_thunk_fn000000006EC02100:
	fn000000006EC02100(0x000000006EC07000<p64>, rcx)
	return
fn000000006EC01370_exit:


void fn000000006EC01380()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006EC02300
// MayUse: 
// LiveOut:
// Trashed: SCZO rax rcx rdx
// Preserved: rsp
fn000000006EC01380_entry:
l000000006EC01380:
l000000006EC01387_thunk_fn000000006EC01370:
	fn000000006EC01370(0x000000006EC01390<p64>)
	return
fn000000006EC01380_exit:


void fn000000006EC01390()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: rsp
fn000000006EC01390_entry:
l000000006EC01390:
	return
fn000000006EC01390_exit:


void hexdump()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: rsp
hexdump_entry:
l000000006EC013A0:
	return
hexdump_exit:


void fn000000006EC013B0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO rax rdx
// Preserved: rsp
fn000000006EC013B0_entry:
l000000006EC013B0:
	word64 rax_10 = Mem0[Mem0[0x000000006EC03010<p64>:word64]:word64]
	branch rax_10 == 0<64> l000000006EC013E5
l000000006EC013C3:
l000000006EC013C8:
	call rax_10 (retsize: 8;)
		uses: rdx:rax_16 + 8<64>
	word64 rax_16 = Mem15[0x000000006EC03010<p64>:word64]
	rax_10 = Mem15[rax_16 + 8<64>:word64]
	Mem19[0x000000006EC03010<p64>:word64] = rax_16 + 8<64>
	branch rax_10 != 0<64> l000000006EC013C8
l000000006EC013E5:
	return
fn000000006EC013B0_exit:


void fn000000006EC013F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006EC01460
// MayUse: 
// LiveOut:
// Trashed: SCZO r8 rax rcx rdx
// Preserved: rbx rsi rsp
fn000000006EC013F0_entry:
l000000006EC013F0:
	word64 rdx_10 = Mem8[0x000000006EC04180<p64>:word64]
	word32 eax_12 = Mem8[rdx_10:word32]
	word32 ecx_33 = SLICE(CONVERT(eax_12, word32, uint64), word32, 0)
	branch eax_12 == 0xFFFFFFFF<32> l000000006EC01440
l000000006EC01440:
	word64 rax_18 = 0<u64>
l000000006EC01448:
	word64 r8_24 = CONVERT(SLICE(rax_18 + 1<64>, word32, 0), word32, uint64)
	ecx_33 = SLICE(CONVERT(SLICE(rax_18, word32, 0), word32, uint64), word32, 0) (alias)
	rax_18 = r8_24
	branch Mem8[rdx_10 + r8_24 * 8<64>:word64] != 0<64> l000000006EC01448
l000000006EC01458:
l000000006EC01407:
	branch ecx_33 == 0<32> l000000006EC0142B
l000000006EC0140B:
	word64 rax_40 = CONVERT(ecx_33, word32, uint64)
	word64 rbx_44 = rdx_10 + rax_40 * 8<64>
	word64 rsi_47 = rdx_10 - 8<64> + (rax_40 - CONVERT(ecx_33 - 1<32>, word32, uint64)) * 8<64>
l000000006EC01420:
	word64 r8_54
	call fn9090909090909090 (retsize: 8;)
		uses: r8:r8_54
		defs: r8:r8_54
	rbx_44 = rbx_44 - 8<64>
	branch rbx_44 != rsi_47 l000000006EC01420
l000000006EC0142B:
l000000006EC01438_thunk_fn000000006EC01370:
	fn000000006EC01370(0x000000006EC013B0<p64>)
	return
fn000000006EC013F0_exit:


void fn000000006EC01460()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
//      main
// MayUse: 
// LiveOut:
// Trashed: SCZO r8 rax rcx rdx
// Preserved: rsp
fn000000006EC01460_entry:
l000000006EC01460:
	branch SLICE(CONVERT(Mem0[0x000000006EC07020<p64>:word32], word32, uint64), word32, 0) == 0<32> l000000006EC01470
l000000006EC01470:
	Mem10[0x000000006EC07020<p64>:word32] = 1<32>
l000000006EC0147A_thunk_fn000000006EC013F0:
	fn000000006EC013F0()
	return
l000000006EC0146A:
	return
fn000000006EC01460_exit:


void fn000000006EC01480(word32 edx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx:[0..31]
// LiveOut:
// Trashed: SCZO rax rcx
// Preserved: rsp
fn000000006EC01480_entry:
l000000006EC01480:
	branch edx == 3<32> l000000006EC014A0
l000000006EC01489:
	branch edx == 0<32> l000000006EC014A0
l000000006EC014A0:
	fn000000006EC01B40(edx)
	return
l000000006EC0148D:
	return
fn000000006EC01480_exit:


word32 fn000000006EC014B0(word32 edx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006EC01010
// MayUse:  edx:[0..31]
// LiveOut: edx
// Trashed: SCZO edx rax rcx
// Preserved: rbx rsi rsp
fn000000006EC014B0_entry:
l000000006EC014B0:
	word64 rax_10 = Mem8[0x000000006EC04170<p64>:word64]
	branch Mem8[rax_10:word32] == 2<32> l000000006EC014C8
l000000006EC014C2:
	Mem13[rax_10:word32] = 2<32>
l000000006EC014C8:
	branch edx == 2<32> l000000006EC014E0
l000000006EC014E0:
	word64 rbx_18 = 0x000000006EC0A050<p64>
	branch 0x000000006EC0A050<p64> == 0x000000006EC0A050<p64> l000000006EC014D2
l000000006EC014F3:
l000000006EC014F8:
	word64 rax_24 = Mem62[rbx_18:word64]
	branch rax_24 == 0<64> l000000006EC01502
l000000006EC01500:
	word64 rcx_80
	call rax_24 (retsize: 8;)
		uses: edx:edx_29,rcx:rcx_80
		defs: edx:edx_32,rcx:rcx_80
l000000006EC01502:
	rbx_18 = rbx_18 + 8<64>
	branch 0x000000006EC0A050<p64> != rbx_18 l000000006EC014F8
l000000006EC0150B:
	return edx
l000000006EC014CD:
	branch edx == 1<32> l000000006EC01520
l000000006EC01520:
	fn000000006EC01B40(edx)
	return edx
l000000006EC014D2:
	return edx
fn000000006EC014B0_exit:


void fn000000006EC01540()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO rax
// Preserved: rsp
fn000000006EC01540_entry:
l000000006EC01540:
	return
fn000000006EC01540_exit:


void fn000000006EC01550(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006EC015C0
//      fn000000006EC01730
// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO r12 r8 r9 rax rbx rcx rdx rsp
// Preserved:
fn000000006EC01550_entry:
l000000006EC01550:
	word64 rax_24 = fn000000006EC02260(2<32>)
	fwrite(0x000000006EC04060<p64>, 1<u64>, 0x1B<u64>, rax_24)
	word64 rcx_52
	call msvcrt.dll!vfprintf (retsize: 8;)
		uses: r8:fp + 0x10<64>,r9:rax_24,rcx:fn000000006EC02260(2<32>),rdx:rcx
		defs: rcx:rcx_52
	abort()
l000000006EC015BA_thunk_fn000000006EC015C0:
	fn000000006EC015C0(rcx_52)
	return
fn000000006EC01550_exit:


void fn000000006EC015C0(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006EC01550
//      fn000000006EC01730
// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO r12 r8 r9 rax rbx rcx rdx rsi rsp
// Preserved:
fn000000006EC015C0_entry:
l000000006EC015C0:
	word64 rbx_182
	word64 rbx_13 = CONVERT(Mem11[0x000000006EC07064<p64>:word32], word32, int64)
	word32 ebx_16 = SLICE(rbx_13, word32, 0)
	branch ebx_16 <= 0<32> l000000006EC016F0
l000000006EC015DA:
	word64 rax_22 = Mem11[0x000000006EC07068<p64>:word64] + 0x18<64>
	word64 rcx_299 = 0<64>
l000000006EC015F0:
	word32 ecx_37 = SLICE(rcx_299, word32, 0)
	word64 rdx_26 = Mem11[rax_22:word64]
	branch rdx_26 >u rcx l000000006EC0160C
l000000006EC015F8:
	branch rcx <u rdx_26 + CONVERT(Mem11[Mem11[rax_22 + 8<64>:word64] + 8<64>:word32], word32, uint64) l000000006EC01693
l000000006EC0160C:
	rcx_299 = CONVERT(ecx_37 + 1<32>, word32, uint64)
	rax_22 = rax_22 + 0x28<64>
	rbx_182 = rbx_13 (alias)
	branch SLICE(rcx_299, word32, 0) != ebx_16 l000000006EC015F0
l000000006EC01617:
	word64 rax_49 = fn000000006EC01D50(rcx)
	branch rax_49 == 0<64> l000000006EC01712
l000000006EC0162B:
	word64 rbx_65 = rbx_182 * 5<64>
	word64 rax_67 = Mem62[0x000000006EC07068<p64>:word64] + (rbx_65 << 3<64>)
	Mem69[rax_67 + 0x20<64>:word64] = rax_49
	Mem70[rax_67:word32] = 0<32>
	word64 rax_72 = fn000000006EC01E80()
	word64 rax_85 = Mem70[0x000000006EC07068<p64>:word64]
	word64 rcx_84 = CONVERT(Mem70[rax_49 + 0xC<64>:word32], word32, uint64) + rax_72
	Mem86[rax_85 + 0x18<64> + (rbx_65 << 3<64>):word64] = rcx_84
	branch SEQ(SLICE(rax_85, word32, 32), VirtualQuery(rcx_84, fp - 0x48<64>, 0x30<u64>)) == 0<64> l000000006EC016F7
l000000006EC016F7:
	fn000000006EC01550(0x000000006EC040A0<p64>)
l000000006EC01712:
	fn000000006EC01550(0x000000006EC04080<p64>)
l000000006EC0172D_thunk_fn000000006EC01730:
	fn000000006EC01730()
	return
l000000006EC01678:
	word64 rax_123 = CONVERT(dwLoc24, word32, uint64)
	word32 eax_142 = SLICE(rax_123, word32, 0)
	branch SLICE(CONVERT(SLICE(CONVERT(SLICE(rax_123 - 0x40<64>, word32, 0), word32, uint64), word32, 0) & 0xFFFFFFBF<32>, word32, uint64), word32, 0) == 0<32> l000000006EC0168C
l000000006EC01684:
	branch SLICE(CONVERT(SLICE(CONVERT(SLICE(rax_123 - 4<64>, word32, 0), word32, uint64), word32, 0) & 0xFFFFFFFB<32>, word32, uint64), word32, 0) != 0<32> l000000006EC016A0
l000000006EC016A0:
	word64 r8_147 = 4<u64>
	branch eax_142 == 2<32> l000000006EC016BC
l000000006EC016B8_1:
	r8_147 = 0x40<64> (alias)
l000000006EC016BC:
	word64 rbx_155 = (rbx_65 << 3<64>) + Mem86[0x000000006EC07068<p64>:word64]
	Mem157[rbx_155 + 8<64>:word64] = qwLoc48
	Mem160[rbx_155 + 0x10<64>:word64] = qwLoc30
	branch VirtualProtect(qwLoc48, qwLoc30, r8_147, rbx_155) != 0<32> l000000006EC0168C
l000000006EC016D8:
	GetLastError()
	fn000000006EC01550(0x000000006EC040D8<p64>)
l000000006EC016F0:
	rbx_182 = 0<u64>
l000000006EC0168C:
	Mem188[0x000000006EC07064<p64>:word32] = Mem186[0x000000006EC07064<p64>:word32] + 1<32>
l000000006EC01693:
	return
fn000000006EC015C0_exit:


void fn000000006EC01730()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
//      fn000000006EC015C0
// MayUse: 
// LiveOut:
// Trashed: SCZO r12 r15 r8 r9 rax rbp rbx rcx rdi rdx rsi rsp
// Preserved: r13 r14
fn000000006EC01730_entry:
l000000006EC01730:
	word32 edi_31 = SLICE(CONVERT(Mem26[0x000000006EC07060<p64>:word32], word32, uint64), word32, 0)
	branch edi_31 == 0<32> l000000006EC01768
l000000006EC01768:
	Mem35[0x000000006EC07060<p64>:word32] = 1<32>
	word64 rax_46 = CONVERT(CONVERT(SLICE(CONVERT(fn000000006EC01DD0(), uint32, uint64), word32, 0), word32, int64) * 0x28<64> + 0xF<32>, word32, word64)
	fn000000006EC02020(rax_46 & 0xFFFFFFFFFFFFFFF0<64>)
	word64 r12_54 = Mem35[0x000000006EC04190<p64>:word64]
	word64 rbx_102 = Mem35[0x000000006EC041A0<p64>:word64]
	Mem56[0x000000006EC07064<p64>:word32] = 0<32>
	Mem59[0x000000006EC07068<p64>:word64] = fp - 0x78<64> - (rax_46 & 0xFFFFFFFFFFFFFFF0<64>) + 0x20<64>
	word64 rax_61 = r12_54 - rbx_102
	branch rax_61 <= 7<64> l000000006EC01752
l000000006EC017C1:
	word64 rax_621
	word64 rdx_620 = CONVERT(Mem59[rbx_102:word32], word32, uint64)
	word32 edx_68 = SLICE(rdx_620, word32, 0)
	branch rax_61 > 0xB<64> l000000006EC018F8
l000000006EC018F8:
	branch edx_68 != 0<32> l000000006EC01970
l000000006EC018FC:
	rax_621 = CONVERT(Mem59[rbx_102 + 4<64>:word32], word32, uint64)
	branch SLICE(CONVERT(SLICE(CONVERT(SLICE(rax_621, word32, 0), word32, uint64), word32, 0) | Mem59[rbx_102 + 8<64>:word32], word32, uint64), word32, 0) != 0<32> l000000006EC017D8
l000000006EC0190A:
	rdx_620 = CONVERT(Mem59[rbx_102 + 0xC<64>:word32], word32, uint64)
	rbx_102 = rbx_102 + 0xC<64>
l000000006EC017CD:
	branch SLICE(rdx_620, word32, 0) != 0<32> l000000006EC01970
l000000006EC017D5:
	rax_621 = CONVERT(Mem59[rbx_102 + 4<64>:word32], word32, uint64)
l000000006EC017D8:
	branch SLICE(rax_621, word32, 0) != 0<32> l000000006EC01970
l000000006EC01970:
	branch rbx_102 >=u r12_54 l000000006EC01752
l000000006EC01979:
	word64 r14_111 = Mem59[0x000000006EC041C0<p64>:word64]
l000000006EC01980:
	word64 rsi_120 = CONVERT(Mem113[rbx_102 + 4<64>:word32], word32, uint64) + r14_111
	word32 r13d_124 = SLICE(CONVERT(SLICE(CONVERT(Mem113[rbx_102:word32], word32, uint64), word32, 0) + Mem113[rsi_120:word32], word32, uint64), word32, 0)
	fn000000006EC015C0(rsi_120)
	Mem138[rsi_120:word32] = r13d_124
	rbx_102 = rbx_102 + 8<64>
	branch rbx_102 <u r12_54 l000000006EC01980
l000000006EC019A0:
l000000006EC017E0:
	branch SLICE(CONVERT(Mem59[rbx_102 + 8<64>:word32], word32, uint64), word32, 0) != 1<32> l000000006EC019B1
l000000006EC017EC:
	word64 rbx_146 = rbx_102 + 0xC<64>
	branch rbx_146 >=u r12_54 l000000006EC01752
l000000006EC017F9:
	word64 r13_149 = Mem59[0x000000006EC041C0<p64>:word64]
l000000006EC0183D:
	word64 rax_160 = CONVERT(Mem152[rbx_146:word32], word32, uint64) + r13_149
	word32 edx_163 = SLICE(CONVERT(CONVERT(Mem152[rbx_146 + 8<64>:byte], byte, word32), word32, uint64), word32, 0)
	word64 rsi_161 = CONVERT(Mem152[rbx_146 + 4<64>:word32], word32, uint64) + r13_149
	word64 r15_162 = Mem152[rax_160:word64]
	branch edx_163 == 0x20<32> l000000006EC01948
l000000006EC01948:
	word64 rdx_167 = CONVERT(Mem152[rsi_161:word32], word32, uint64)
	word64 rdx_170 = rdx_167 | 0xFFFFFFFF00000000<64>
	branch SLICE(rdx_167, word32, 0) < 0<32> l000000006EC01956
l000000006EC01952_1:
	rdx_170 = rdx_167
l000000006EC01956:
	fn000000006EC015C0(rsi_161)
	Mem202[rsi_161:word32] = SLICE(r15_162 + (rdx_170 - rax_160), word32, 0)
l000000006EC01858:
	branch edx_163 >u 0x20<32> l000000006EC01920
l000000006EC01920:
	branch edx_163 != 0x40<32> l000000006EC019A5
l000000006EC01929:
	word64 r15_209 = r15_162 + (Mem152[rsi_161:word64] - rax_160)
	fn000000006EC015C0(rsi_161)
	Mem217[rsi_161:word64] = r15_209
l000000006EC0185E:
	branch edx_163 == 8<32> l000000006EC01810
l000000006EC01810:
	word64 rdx_221 = CONVERT(CONVERT(Mem152[rsi_161:byte], byte, word32), word32, uint64)
	branch SLICE(rdx_221, byte, 0) >= 0<8> l000000006EC01826
l000000006EC01822_1:
	rdx_221 = rdx_221 | 0xFFFFFFFFFFFFFF00<64>
l000000006EC01826:
	fn000000006EC015C0(rcx_246)
	Mem251[rsi_161:byte] = SLICE(r15_162 + (rdx_221 - rax_160), byte, 0)
l000000006EC01834:
	rbx_146 = rbx_146 + 0xC<64>
	branch rbx_146 >=u r12_54 l000000006EC018A0
l000000006EC01863:
	branch edx_163 != 0x10<32> l000000006EC019A5
l000000006EC019A5:
	fn000000006EC01550(0x000000006EC04138<p64>)
l000000006EC019B1:
	fn000000006EC01550(0x000000006EC04100<p64>)
l000000006EC019BF_thunk_fn000000006EC019C0:
	fn000000006EC019C0()
	return
l000000006EC0186C:
	word64 rdx_312 = CONVERT(CONVERT(Mem152[rsi_161:word16], word16, word32), word32, uint64)
	branch SLICE(rdx_312, word16, 0) >= 0<16> l000000006EC01883
l000000006EC0187F_1:
	rdx_312 = rdx_312 | 0xFFFFFFFFFFFF0000<64>
l000000006EC01883:
	fn000000006EC015C0(rcx_338)
	Mem343[rsi_161:word16] = SLICE(r15_162 + (rdx_312 - rax_160), word16, 0)
	rbx_146 = rbx_146 + 0xC<64>
	branch rbx_146 <u r12_54 l000000006EC0183D
l000000006EC0189B:
l000000006EC018A0:
	branch SLICE(CONVERT(Mem346[0x000000006EC07064<p64>:word32], word32, uint64), word32, 0) <= 0<32> l000000006EC01752
l000000006EC018AE:
	word64 rbx_355 = 0<u64>
l000000006EC018C0:
	word64 rax_365 = Mem346[0x000000006EC07068<p64>:word64] + rbx_355
	word64 r8_367 = CONVERT(Mem346[rax_365:word32], word32, uint64)
	branch SLICE(r8_367, word32, 0) == 0<32> l000000006EC018DF
l000000006EC018D2:
	VirtualProtect(Mem346[rax_365 + 8<64>:word64], Mem346[rax_365 + 0x10<64>:word64], r8_367, fp - 0x4C<64>)
l000000006EC018DF:
	edi_31 = SLICE(CONVERT(edi_31 + 1<32>, word32, uint64), word32, 0) (alias)
	rbx_355 = rbx_355 + 0x28<64>
	branch edi_31 < Mem346[0x000000006EC07064<p64>:word32] l000000006EC018C0
l000000006EC018EE:
l000000006EC01752:
	return
fn000000006EC01730_exit:


void fn000000006EC019C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006EC01730
//      fn000000006EC01B40
// MayUse: 
// LiveOut:
// Trashed: SCZO rax rcx
// Preserved: r12 rbx rdi rsi rsp
fn000000006EC019C0_entry:
l000000006EC019C0:
	EnterCriticalSection(0x000000006EC070A0<p64>)
	word64 rbx_17 = Mem14[0x000000006EC07080<p64>:word64]
	branch rbx_17 == 0<64> l000000006EC01A14
l000000006EC019E2:
l000000006EC019F0:
	word64 rax_27 = TlsGetValue(CONVERT(Mem14[rbx_17:word32], word32, uint64))
	branch GetLastError() != 0<32> l000000006EC01A0B
l000000006EC019FD:
	branch rax_27 == 0<64> l000000006EC01A0B
l000000006EC01A02:
	word64 rax_42
	call Mem14[rbx_17 + 8<64>:word64] (retsize: 8;)
		uses: rax:rax_42,rcx:rax_27
		defs: rax:rax_42
l000000006EC01A0B:
	rbx_17 = Mem14[rbx_17 + 0x10<64>:word64]
	branch rbx_17 != 0<64> l000000006EC019F0
l000000006EC01A14:
	LeaveCriticalSection(0x000000006EC070A0<p64>)
	return
fn000000006EC019C0_exit:


void fn000000006EC01A30(word32 ecx, word64 rdx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..31] rdx:[0..63]
// LiveOut:
// Trashed: SCZO rax rcx rdx
// Preserved: rbx rdi rsi rsp
fn000000006EC01A30_entry:
	word32 ecx = SLICE(rcx, word32, 0)
l000000006EC01A30:
	word32 edi_39 = SLICE(CONVERT(ecx, word32, uint64), word32, 0)
	branch SLICE(CONVERT(Mem11[0x000000006EC07088<p64>:word32], word32, uint64), word32, 0) != 0<32> l000000006EC01A50
l000000006EC01A50:
	word64 rax_28 = calloc(1<u64>, 0x18<u64>)
	branch rax_28 == 0<64> l000000006EC01AA3
l000000006EC01AA3:
l000000006EC01A67:
	Mem40[rax_28:word32] = edi_39
	Mem42[rax_28 + 8<64>:word64] = rdx
	EnterCriticalSection(0x000000006EC070A0<p64>)
	word64 rax_43 = Mem42[0x000000006EC07080<p64>:word64]
	Mem45[0x000000006EC07080<p64>:word64] = rax_28
	Mem46[rax_28 + 0x10<64>:word64] = rax_43
	LeaveCriticalSection(0x000000006EC070A0<p64>)
	return
l000000006EC01A46:
	return
fn000000006EC01A30_exit:


void fn000000006EC01AB0(word32 ecx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..31]
// LiveOut:
// Trashed: SCZO rax rcx rdx
// Preserved: rbx rsp
fn000000006EC01AB0_entry:
	word32 ecx = SLICE(rcx, word32, 0)
l000000006EC01AB0:
	word32 ebx_65 = SLICE(CONVERT(ecx, word32, uint64), word32, 0)
	branch SLICE(CONVERT(Mem5[0x000000006EC07088<p64>:word32], word32, uint64), word32, 0) != 0<32> l000000006EC01AD0
l000000006EC01AD0:
	EnterCriticalSection(0x000000006EC070A0<p64>)
	word64 rcx_17 = Mem5[0x000000006EC07080<p64>:word64]
	branch rcx_17 == 0<64> l000000006EC01B13
l000000006EC01AE9:
	word64 rdx_22 = 0<u64>
l000000006EC01AFB:
	word64 rax_33 = Mem5[rcx_17 + 0x10<64>:word64]
	branch SLICE(CONVERT(Mem5[rcx_17:word32], word32, uint64), word32, 0) != ebx_65 l000000006EC01AF0
l000000006EC01AF0:
	rdx_22 = rcx_17
	branch rax_33 == 0<64> l000000006EC01B13
l000000006EC01AF8:
	rcx_17 = rax_33
l000000006EC01B05:
	branch rdx_22 == 0<64> l000000006EC01B30
l000000006EC01B30:
	Mem44[0x000000006EC07080<p64>:word64] = rax_33
l000000006EC01B0A:
	Mem45[rdx_22 + 0x10<64>:word64] = rax_33
l000000006EC01B0E:
	free(rcx_17)
l000000006EC01B13:
	LeaveCriticalSection(0x000000006EC070A0<p64>)
	return
l000000006EC01AC1:
	return
fn000000006EC01AB0_exit:


void fn000000006EC01B40(word32 edx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006EC01480
//      fn000000006EC014B0
// MayUse:  edx:[0..31]
// LiveOut:
// Trashed: SCZO rax rcx
// Preserved: rbx rsp
fn000000006EC01B40_entry:
l000000006EC01B40:
	branch edx == 2<32> l000000006EC01B90
l000000006EC01B90:
	fn000000006EC02010()
	return
l000000006EC01B4A:
	branch edx >u 2<32> l000000006EC01B78
l000000006EC01B78:
	branch edx != 3<32> l000000006EC01B68
l000000006EC01B7D:
	branch SLICE(CONVERT(Mem5[0x000000006EC07088<p64>:word32], word32, uint64), word32, 0) == 0<32> l000000006EC01B68
l000000006EC01B87:
	fn000000006EC019C0()
l000000006EC01B4C:
	branch edx == 0<32> l000000006EC01BA0
l000000006EC01BA0:
	branch SLICE(CONVERT(Mem5[0x000000006EC07088<p64>:word32], word32, uint64), word32, 0) != 0<32> l000000006EC01C00
l000000006EC01C00:
	fn000000006EC019C0()
l000000006EC01BAA:
	branch SLICE(CONVERT(Mem5[0x000000006EC07088<p64>:word32], word32, uint64), word32, 0) != 1<32> l000000006EC01B68
l000000006EC01BB5:
	word64 rbx_52 = Mem5[0x000000006EC07080<p64>:word64]
	branch rbx_52 == 0<64> l000000006EC01BD9
l000000006EC01BC1:
l000000006EC01BC8:
	rbx_52 = Mem5[rbx_52 + 0x10<64>:word64]
	free(rbx_52)
	branch rbx_52 != 0<64> l000000006EC01BC8
l000000006EC01BD9:
	Mem64[0x000000006EC07080<p64>:word64] = 0<64>
	Mem65[0x000000006EC07088<p64>:word32] = 0<32>
	DeleteCriticalSection(0x000000006EC070A0<p64>)
l000000006EC01B50:
	branch SLICE(CONVERT(Mem5[0x000000006EC07088<p64>:word32], word32, uint64), word32, 0) == 0<32> l000000006EC01C10
l000000006EC01C10:
	InitializeCriticalSection(0x000000006EC070A0<p64>)
l000000006EC01B5E:
	Mem73[0x000000006EC07088<p64>:word32] = 1<32>
l000000006EC01B68:
	return
fn000000006EC01B40_exit:


void fn000000006EC01C30(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO rax rcx rdx
// Preserved: rsp
fn000000006EC01C30_entry:
l000000006EC01C30:
	branch Mem0[rcx:word16] != 0x5A4D<16> l000000006EC01C48
l000000006EC01C39:
	branch Mem0[rcx + CONVERT(Mem0[rcx + 0x3C<64>:word32], word32, int64):word32] == 0x4550<32> l000000006EC01C50
l000000006EC01C50:
	return
l000000006EC01C48:
	return
fn000000006EC01C30_exit:


void fn000000006EC01C60(word64 rcx, word64 rdx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..63] rdx:[0..63]
// LiveOut:
// Trashed: SCZO r8 r9 rax rcx rdx
// Preserved: rsp
fn000000006EC01C60_entry:
l000000006EC01C60:
	word64 rdx_8 = CONVERT(Mem0[rcx + 0x3C<64>:word32], word32, int64) + rcx
	word64 rax_11 = rdx_8 + 0x18<64> + CONVERT(CONVERT(Mem0[rdx_8 + 0x14<64>:word16], word16, word32), word32, uint64)
	word32 edx_14 = SLICE(CONVERT(CONVERT(Mem0[rdx_8 + 6<64>:word16], word16, word32), word32, uint64), word32, 0)
	branch edx_14 == 0<32> l000000006EC01CAC
l000000006EC01C7C:
	word64 r9_23 = rax_11 + 0x28<64> + CONVERT(edx_14 - 1<32>, word32, uint64) * 0x28<64>
l000000006EC01C90:
	word64 rcx_27 = CONVERT(Mem0[rax_11 + 0xC<64>:word32], word32, uint64)
	word32 edx_32 = SLICE(rcx_27, word32, 0)
	branch rcx_27 >u rdx l000000006EC01CA3
l000000006EC01C9B:
	branch CONVERT(edx_32 + Mem0[rax_11 + 8<64>:word32], word32, uint64) >u rdx l000000006EC01CAE
l000000006EC01CA3:
	rax_11 = rax_11 + 0x28<64>
	branch rax_11 != r9_23 l000000006EC01C90
l000000006EC01CAC:
l000000006EC01CAE:
	return
fn000000006EC01C60_exit:


void fn000000006EC01CB0(word32 rax_32_32, word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax_32_32:[0..31] rcx:[0..63]
// LiveOut:
// Trashed: SCZO r8 rax rcx rdx
// Preserved: r12 rbx rsi rsp
fn000000006EC01CB0_entry:
l000000006EC01CB0:
	branch SEQ(rax_32_32, strlen(rcx)) >u 8<64> l000000006EC01D40
l000000006EC01CC6:
	word64 rdx_20 = Mem11[0x000000006EC041C0<p64>:word64]
	branch Mem11[rdx_20:word16] != 0x5A4D<16> l000000006EC01D2E
l000000006EC01CD7:
	word64 rax_26 = CONVERT(Mem11[rdx_20 + 0x3C<64>:word32], word32, int64) + rdx_20
	branch Mem11[rax_26:word32] != 0x4550<32> l000000006EC01D2E
l000000006EC01CE6:
	branch Mem11[rax_26 + 0x18<64>:word16] != 0x20B<16> l000000006EC01D2E
l000000006EC01CEE:
	word64 r12_33 = rax_26 + 0x18<64> + CONVERT(CONVERT(Mem11[rax_26 + 0x14<64>:word16], word16, word32), word32, uint64)
	word32 eax_36 = SLICE(CONVERT(CONVERT(Mem11[rax_26 + 6<64>:word16], word16, word32), word32, uint64), word32, 0)
	branch eax_36 == 0<32> l000000006EC01D40
l000000006EC01CFF:
	word64 rsi_45 = r12_33 + 0x28<64> + CONVERT(eax_36 - 1<32>, word32, uint64) * 0x28<64>
l000000006EC01D19:
	branch strncmp(r12_33, rcx, 8<u64>) != 0<32> l000000006EC01D10
l000000006EC01D10:
	r12_33 = r12_33 + 0x28<64>
	branch r12_33 == rsi_45 l000000006EC01D40
l000000006EC01D40:
	return
l000000006EC01D2E:
	return
fn000000006EC01CB0_exit:


word64 fn000000006EC01D50(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006EC015C0
// MayUse:  rcx:[0..63]
// LiveOut: rax
// Trashed: SCZO r8 r9 rax rcx rdx
// Preserved: rsp
fn000000006EC01D50_entry:
l000000006EC01D50:
	word64 rdx_4 = Mem0[0x000000006EC041C0<p64>:word64]
	word64 rax_21 = 0<u64>
	branch Mem0[rdx_4:word16] != 0x5A4D<16> l000000006EC01D70
l000000006EC01D60:
	word64 r8_10 = CONVERT(Mem0[rdx_4 + 0x3C<64>:word32], word32, int64) + rdx_4
	branch Mem0[r8_10:word32] == 0x4550<32> l000000006EC01D78
l000000006EC01D78:
	branch Mem0[r8_10 + 0x18<64>:word16] != 0x20B<16> l000000006EC01D70
l000000006EC01D81:
	word64 rcx_18 = rcx - rdx_4
	word32 edx_22 = SLICE(CONVERT(CONVERT(Mem0[r8_10 + 6<64>:word16], word16, word32), word32, uint64), word32, 0)
	rax_21 = r8_10 + 0x18<64> + CONVERT(CONVERT(Mem0[r8_10 + 0x14<64>:word16], word16, word32), word32, uint64)
	branch edx_22 == 0<32> l000000006EC01DC5
l000000006EC01D97:
	word64 r9_31 = rax_21 + 0x28<64> + CONVERT(edx_22 - 1<32>, word32, uint64) * 0x28<64>
l000000006EC01DA8:
	word64 r8_35 = CONVERT(Mem0[rax_21 + 0xC<64>:word32], word32, uint64)
	word32 edx_40 = SLICE(r8_35, word32, 0)
	branch rcx_18 <u r8_35 l000000006EC01DBC
l000000006EC01DB4:
	branch rcx_18 <u CONVERT(edx_40 + Mem0[rax_21 + 8<64>:word32], word32, uint64) l000000006EC01D70
l000000006EC01DBC:
	rax_21 = rax_21 + 0x28<64>
	branch rax_21 != r9_31 l000000006EC01DA8
l000000006EC01DC5:
	return 0<u64>
l000000006EC01D70:
	return rax_21
fn000000006EC01D50_exit:


word32 fn000000006EC01DD0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006EC01730
// MayUse: 
// LiveOut: rax
// Trashed: SCZO r8 rax rdx
// Preserved: rsp
fn000000006EC01DD0_entry:
l000000006EC01DD0:
	word64 rax_4 = Mem0[0x000000006EC041C0<p64>:word64]
	branch Mem0[rax_4:word16] != 0x5A4D<16> l000000006EC01DF0
l000000006EC01DE1:
	word64 rax_10 = rax_4 + CONVERT(Mem0[rax_4 + 0x3C<64>:word32], word32, int64)
	branch Mem0[rax_10:word32] == 0x4550<32> l000000006EC01DF8
l000000006EC01DF8:
	branch Mem0[rax_10 + 0x18<64>:word16] != 0x20B<16> l000000006EC01DF0
l000000006EC01E00:
	return SLICE(CONVERT(SLICE(CONVERT(CONVERT(Mem0[rax_10 + 6<64>:word16], word16, word32), word32, uint64), word32, 0), word32, uint64), word32, 0)
l000000006EC01DF0:
	return 0<32>
fn000000006EC01DD0_exit:


void fn000000006EC01E10(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO r8 rax rcx rdx
// Preserved: rsp
fn000000006EC01E10_entry:
l000000006EC01E10:
	word64 r8_4 = Mem0[0x000000006EC041C0<p64>:word64]
	branch Mem0[r8_4:word16] != 0x5A4D<16> l000000006EC01E30
l000000006EC01E21:
	word64 rdx_10 = CONVERT(Mem0[r8_4 + 0x3C<64>:word32], word32, int64) + r8_4
	branch Mem0[rdx_10:word32] == 0x4550<32> l000000006EC01E38
l000000006EC01E38:
	branch Mem0[rdx_10 + 0x18<64>:word16] != 0x20B<16> l000000006EC01E30
l000000006EC01E40:
	word64 rax_17 = rdx_10 + 0x18<64> + CONVERT(CONVERT(Mem0[rdx_10 + 0x14<64>:word16], word16, word32), word32, uint64) + 0x27<64>
	word32 edx_20 = SLICE(CONVERT(CONVERT(Mem0[rdx_10 + 6<64>:word16], word16, word32), word32, uint64), word32, 0)
	branch edx_20 == 0<32> l000000006EC01E78
l000000006EC01E51:
	word64 rdx_29 = rax_17 + 0x28<64> + CONVERT(edx_20 - 1<32>, word32, uint64) * 0x28<64>
l000000006EC01E60:
	branch (Mem0[rax_17 + 0<64>:byte] & 0x20<8>) == 0<8> l000000006EC01E6F
l000000006EC01E66:
	branch rcx == 0<64> l000000006EC01E30
l000000006EC01E6B:
	rcx = rcx - 1<64>
l000000006EC01E6F:
	rax_17 = rax_17 + 0x28<64>
	branch rax_17 != rdx_29 l000000006EC01E60
l000000006EC01E78:
	return
l000000006EC01E30:
	return
fn000000006EC01E10_exit:


word64 fn000000006EC01E80()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006EC015C0
// MayUse: 
// LiveOut: rax
// Trashed: SCZO r8 rax rdx
// Preserved: rsp
fn000000006EC01E80_entry:
l000000006EC01E80:
	word64 rax_4 = Mem0[0x000000006EC041C0<p64>:word64]
	word64 r8_15 = 0<u64>
	branch Mem0[rax_4:word16] != 0x5A4D<16> l000000006EC01EA0
l000000006EC01E91:
	word64 rdx_10 = CONVERT(Mem0[rax_4 + 0x3C<64>:word32], word32, int64) + rax_4
	branch Mem0[rdx_10:word32] == 0x4550<32> l000000006EC01EA8
l000000006EC01EA8:
	branch Mem0[rdx_10 + 0x18<64>:word16] != 0x20B<16> l000000006EC01EB2
l000000006EC01EAE_1:
	r8_15 = rax_4
l000000006EC01EB2:
	return r8_15
l000000006EC01EA0:
	return 0<u64>
fn000000006EC01E80_exit:


void fn000000006EC01EC0(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO r8 r9 rax rcx rdx
// Preserved: rsp
fn000000006EC01EC0_entry:
l000000006EC01EC0:
	word64 rax_4 = Mem0[0x000000006EC041C0<p64>:word64]
	branch Mem0[rax_4:word16] != 0x5A4D<16> l000000006EC01EE0
l000000006EC01ED1:
	word64 rdx_10 = CONVERT(Mem0[rax_4 + 0x3C<64>:word32], word32, int64) + rax_4
	branch Mem0[rdx_10:word32] == 0x4550<32> l000000006EC01EE8
l000000006EC01EE8:
	branch Mem0[rdx_10 + 0x18<64>:word16] != 0x20B<16> l000000006EC01EE0
l000000006EC01EF0:
	word64 rcx_16 = rcx - rax_4
	word64 rax_19 = rdx_10 + 0x18<64> + CONVERT(CONVERT(Mem0[rdx_10 + 0x14<64>:word16], word16, word32), word32, uint64)
	word32 edx_22 = SLICE(CONVERT(CONVERT(Mem0[rdx_10 + 6<64>:word16], word16, word32), word32, uint64), word32, 0)
	branch edx_22 == 0<32> l000000006EC01EE0
l000000006EC01F04:
	word64 r9_31 = rax_19 + 0x28<64> + CONVERT(edx_22 - 1<32>, word32, uint64) * 0x28<64>
l000000006EC01F10:
	word64 r8_35 = CONVERT(Mem0[rax_19 + 0xC<64>:word32], word32, uint64)
	word32 edx_40 = SLICE(r8_35, word32, 0)
	branch rcx_16 <u r8_35 l000000006EC01F24
l000000006EC01F1C:
	branch rcx_16 <u CONVERT(edx_40 + Mem0[rax_19 + 8<64>:word32], word32, uint64) l000000006EC01F38
l000000006EC01F38:
	return
l000000006EC01F24:
	rax_19 = rax_19 + 0x28<64>
	branch r9_31 != rax_19 l000000006EC01F10
l000000006EC01F2D:
	return
l000000006EC01EE0:
	return
fn000000006EC01EC0_exit:


void fn000000006EC01F50(word32 ecx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..31]
// LiveOut:
// Trashed: SCZO r10 r11 r8 r9 rax rcx rdx
// Preserved: rsp
fn000000006EC01F50_entry:
l000000006EC01F50:
	word64 r11_4 = Mem0[0x000000006EC041C0<p64>:word64]
	branch Mem0[r11_4:word16] != 0x5A4D<16> l000000006EC01F72
l000000006EC01F62:
	word64 r8_10 = CONVERT(Mem0[r11_4 + 0x3C<64>:word32], word32, int64) + r11_4
	branch Mem0[r8_10:word32] == 0x4550<32> l000000006EC01F80
l000000006EC01F80:
	branch Mem0[r8_10 + 0x18<64>:word16] != 0x20B<16> l000000006EC01F72
l000000006EC01F89:
	word64 rax_16 = CONVERT(Mem0[r8_10 + 0x90<64>:word32], word32, uint64)
	branch SLICE(rax_16, word32, 0) == 0<32> l000000006EC01F72
l000000006EC01F94:
	word64 rdx_23 = r8_10 + 0x18<64> + CONVERT(CONVERT(Mem0[r8_10 + 0x14<64>:word16], word16, word32), word32, uint64)
	word32 r8d_26 = SLICE(CONVERT(CONVERT(Mem0[r8_10 + 6<64>:word16], word16, word32), word32, uint64), word32, 0)
	branch r8d_26 == 0<32> l000000006EC01F72
l000000006EC01FA8:
	word64 r10_35 = rdx_23 + 0x28<64> + CONVERT(r8d_26 - 1<32>, word32, uint64) * 0x28<64>
l000000006EC01FB8:
	word64 r9_39 = CONVERT(Mem0[rdx_23 + 0xC<64>:word32], word32, uint64)
	word32 r8d_44 = SLICE(r9_39, word32, 0)
	branch rax_16 <u r9_39 l000000006EC01FCD
l000000006EC01FC4:
	branch rax_16 <u CONVERT(r8d_44 + Mem0[rdx_23 + 8<64>:word32], word32, uint64) l000000006EC01FE0
l000000006EC01FE0:
	word64 rax_50 = rax_16 + r11_4
l000000006EC01FEF:
	word32 ecx_67 = SLICE(rcx, word32, 0)
	branch SLICE(CONVERT(Mem0[rax_50 + 4<64>:word32], word32, uint64), word32, 0) != 0<32> l000000006EC01FFF
l000000006EC01FF8:
	branch SLICE(CONVERT(Mem0[rax_50 + 0xC<64>:word32], word32, uint64), word32, 0) == 0<32> l000000006EC01FD6
l000000006EC01FFF:
	branch ecx_67 > 0<32> l000000006EC01FE8
l000000006EC01FE8:
	rcx = CONVERT(ecx_67 - 1<32>, word32, uint64)
	rax_50 = rax_50 + 0x14<64>
l000000006EC02003:
	return
l000000006EC01FCD:
	rdx_23 = rdx_23 + 0x28<64>
	branch r10_35 != rdx_23 l000000006EC01FB8
l000000006EC01FD6:
	return
l000000006EC01F72:
	return
fn000000006EC01F50_exit:


void fn000000006EC02010()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006EC01B40
// MayUse: 
// LiveOut:
// Trashed:
// Preserved: rsp
fn000000006EC02010_entry:
l000000006EC02010:
	__fninit()
	return
fn000000006EC02010_exit:


void fn000000006EC02020(word64 rax)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006EC01730
// MayUse:  rax:[0..63]
// LiveOut:
// Trashed: SCZO
// Preserved: rax rcx rsp
fn000000006EC02020_entry:
l000000006EC02020:
	word64 rcx_10 = fp + 8<64>
	branch rax <u 0x1000<64> l000000006EC02048
l000000006EC0202F:
	rcx_10 = rcx_10 - 0x1000<64>
	Mem16[rcx_10:word64] = Mem14[rcx_10:word64]
	rax = rax - 0x1000<64>
	branch rax >u 0x1000<64> l000000006EC0202F
l000000006EC02048:
	word64 rcx_24 = rcx_10 - rax
	Mem27[rcx_24:word64] = Mem25[rcx_24:word64]
	return
fn000000006EC02020_exit:


void fn000000006EC02060()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
// MayUse: 
// LiveOut:
// Trashed: rax
// Preserved: rsp
fn000000006EC02060_entry:
l000000006EC02060:
	return
fn000000006EC02060_exit:


void fn000000006EC02070()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
// MayUse: 
// LiveOut:
// Trashed: rax
// Preserved: rsp
fn000000006EC02070_entry:
l000000006EC02070:
	return
fn000000006EC02070_exit:


void fn000000006EC020D0(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006EC01000
// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO rax
// Preserved: rsp
fn000000006EC020D0_entry:
l000000006EC020D0:
	branch rcx == 0<64> l000000006EC020EF
l000000006EC020EF:
	return
l000000006EC020D5:
	Mem14[rcx + 0x10<64>:word64] = 0<64>
	Mem15[rcx + 8<64>:word64] = 0<64>
	Mem16[rcx:word64] = 0<64>
	return
fn000000006EC020D0_exit:


void fn000000006EC02100(word64 rcx, word64 rdx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006EC01370
// MayUse:  rcx:[0..63] rdx:[0..63]
// LiveOut:
// Trashed: SCZO rax
// Preserved: rbp rbx rcx rdi rdx rsi rsp
fn000000006EC02100_entry:
l000000006EC02100:
	branch rcx == 0<64> l000000006EC021BB
l000000006EC021BB:
l000000006EC02117:
	word64 rax_37
	word64 rdx_34
	word64 rdx_42
	call lock (retsize: 8;)
		uses: rcx:8<u64>,rdx:rdx
	branch Mem14[rcx:word64] == 0<64> l000000006EC02190
l000000006EC02190:
	rax_37 = calloc(0x20<u64>, 8<u64>)
	Mem38[rcx:word64] = rax_37
	rdx_34 = 8<u64>
	branch rax_37 == 0<64> l000000006EC021C2
l000000006EC021A7:
	Mem43[rcx + 8<64>:word64] = rax_37
	Mem44[rcx + 0x10<64>:word64] = rax_37 + 0x100<64>
	rdx_42 = rax_37 + 0x100<64>
l000000006EC02127:
	rax_37 = Mem14[rcx + 8<64>:word64]
	rdx_42 = Mem14[rcx + 0x10<64>:word64]
l000000006EC0212F:
	branch rdx_42 == rax_37 l000000006EC02158
l000000006EC02158:
	word64 rcx_53 = Mem52[rcx:word64]
	word64 rax_54 = rax_37 - rcx_53
	word64 rdx_58 = rax_54 >> 3<64> << 4<64>
	word64 rax_60 = realloc(rcx_53, rdx_58)
	rdx_34 = rax_60
	branch rax_60 == 0<64> l000000006EC021C2
l000000006EC021C2:
	call unlock (retsize: 8;)
		uses: rcx:8<u64>,rdx:rdx_72
l000000006EC0217C:
	Mem86[rcx:word64] = rax_60
	Mem89[rcx + 0x10<64>:word64] = rax_60 + rdx_58
	rax_37 = rax_60 + rax_54
l000000006EC02134:
	word64 rdx_91 = rax_37 + 8<64>
	Mem95[rcx + 8<64>:word64] = rdx_91
	Mem97[rax_37:word64] = rdx
	call unlock (retsize: 8;)
		uses: rcx:8<u64>,rdx:rdx_91
l000000006EC0214B:
	return
fn000000006EC02100_exit:


void fn000000006EC021E0(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006EC01010
// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO rax rcx
// Preserved: r12 rbx rsi rsp
fn000000006EC021E0_entry:
l000000006EC021E0:
	call lock (retsize: 8;)
		uses: rcx:8<u64>
	word64 r12_21 = Mem11[rcx:word64]
	word64 rbx_22 = Mem11[rcx + 8<64>:word64]
	Mem23[rcx + 0x10<64>:word64] = 0<64>
	Mem24[rcx + 8<64>:word64] = 0<64>
	Mem27[rcx:word64] = 0<64>
	word64 rcx_28
	call unlock (retsize: 8;)
		uses: rcx:8<u64>
		defs: rcx:rcx_28
	branch r12_21 == 0<64> l000000006EC02246
l000000006EC02222:
	rbx_22 = rbx_22 - 8<64>
	branch r12_21 >u rbx_22 l000000006EC0223E
l000000006EC0222B:
	word64 rax_41 = Mem27[rbx_22:word64]
	branch rax_41 == 0<64> l000000006EC02222
l000000006EC02233:
	call rax_41 (retsize: 8;)
		uses: rcx:rcx_47
		defs: rcx:rcx_49
	rbx_22 = rbx_22 - 8<64>
	branch r12_21 <=u rbx_22 l000000006EC0222B
l000000006EC0223E:
	free(r12_21)
l000000006EC02246:
	return
fn000000006EC021E0_exit:


word64 fn000000006EC02260(word32 ecx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006EC01550
// MayUse:  ecx:[0..31]
// LiveOut: rax
// Trashed: SCZO rax rcx rdx
// Preserved: rbx rsp
fn000000006EC02260_entry:
l000000006EC02260:
	word64 rax_13
	call _iob_func (retsize: 8;)
		uses: ecx:ecx
		defs: rax:rax_13
	return rax_13 + CONVERT(SLICE(CONVERT(ecx, word32, uint64), word32, 0), word32, uint64) * 0x30<64>
fn000000006EC02260_exit:


void main()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO r8 rax rcx rdx
// Preserved: rsp
main_entry:
l000000006EC022F0:
	fn000000006EC01460()
	return
main_exit:


void fn000000006EC02300()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO rax rcx rdx
// Preserved: rsp
fn000000006EC02300_entry:
l000000006EC02300:
l000000006EC02300_thunk_fn000000006EC01380:
	fn000000006EC01380()
	return
fn000000006EC02300_exit:


