void fn000000006D281000()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO rax rcx
// Preserved: rsp
fn000000006D281000_entry:
l000000006D281000:
l000000006D281007_thunk_fn000000006D2820D0:
	fn000000006D2820D0(0x000000006D287000<p64>)
	return
fn000000006D281000_exit:


word32 fn000000006D281010(word32 edx, selector gs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
// MayUse:  gs:[0..15] rdx:[0..31]
// LiveOut: rax
// Trashed: SCZO rax rcx rdx
// Preserved: r12 r13 r8 rbp rbx rdi rsi rsp
fn000000006D281010_entry:
	word32 edx = SLICE(rdx, word32, 0)
l000000006D281010:
	branch edx != 0<32> l000000006D2810A0
l000000006D2810A0:
	branch edx != 1<32> l000000006D281158
l000000006D281158:
	return 1<32>
l000000006D2810A9:
	word64 rbx_50 = Mem20[0x000000006D2841E0<p64>:word64]
	word64 rsi_51 = Mem20[Mem20[gs:0x30<32>:word64] + 8<64>:word64]
l000000006D2810E0:
	word32 edi_109
	__lock()
	word64 rax_63
	__cmpxchg(Mem20[rbx_50:word64], rsi_51, 0<u64>, out rax_63)
	branch rax_63 != 0<64> l000000006D2810D0
l000000006D2810D0:
	branch rsi_51 == rax_63 l000000006D281190
l000000006D281190:
	edi_109 = 1<32> (alias)
l000000006D2810D9:
	Sleep(0x3E8<u64>)
l000000006D2810ED:
	edi_109 = 0<32> (alias)
l000000006D2810EF:
	word64 rsi_80 = Mem20[0x000000006D2841F0<p64>:word64]
	branch SLICE(CONVERT(Mem20[rsi_80:word32], word32, uint64), word32, 0) == 1<32> l000000006D2811F0
l000000006D2811F0:
	_amsg_exit(0x1F<u64>)
l000000006D281101:
	branch SLICE(CONVERT(Mem20[rsi_80:word32], word32, uint64), word32, 0) == 0<32> l000000006D2811B0
l000000006D2811B0:
	word64 rdx_94 = Mem20[0x000000006D284230<p64>:word64]
	word64 rcx_95 = Mem20[0x000000006D284220<p64>:word64]
	Mem96[rsi_80:word32] = 1<32>
	_initterm(rcx_95, rdx_94)
l000000006D28110B:
	branch SLICE(CONVERT(Mem98[rsi_80:word32], word32, uint64), word32, 0) == 1<32> l000000006D2811D0
l000000006D2811D0:
	_initterm(Mem98[0x000000006D284200<p64>:word64], Mem98[0x000000006D284210<p64>:word64])
	Mem106[rsi_80:word32] = 2<32>
l000000006D281116:
	branch edi_109 == 0<32> l000000006D2811A0
l000000006D2811A0:
	Mem124[rbx_50:word64] = 0<u64>
l000000006D28111E:
	branch Mem126[Mem126[0x000000006D2841B0<p64>:word64]:word64] == 0<64> l000000006D28113A
l000000006D28112D:
	fn000000006D2814B0(2<32>)
l000000006D28113A:
	Mem156[0x000000006D287018<p64>:word32] = Mem126[0x000000006D287018<p64>:word32] + 1<32>
	return 1<32>
l000000006D281026:
	word32 edx_183 = SLICE(CONVERT(Mem20[0x000000006D287018<p64>:word32], word32, uint64), word32, 0)
	word64 rax_182 = 0<u64>
	branch edx_183 <= 0<32> l000000006D281090
l000000006D281032:
	word64 rbx_188 = Mem20[0x000000006D2841E0<p64>:word64]
	Mem197[0x000000006D287018<p64>:word32] = SLICE(CONVERT(edx_183 - 1<32>, word32, uint64), word32, 0)
l000000006D28105F:
	__lock()
	word64 rax_204
	__cmpxchg(Mem197[rbx_188:word64], 1<u64>, 0<u64>, out rax_204)
	branch rax_204 != 0<64> l000000006D281058
l000000006D281058:
	Sleep(0x3E8<u64>)
l000000006D28106F:
	word64 rdi_212 = Mem197[0x000000006D2841F0<p64>:word64]
	branch SLICE(CONVERT(Mem197[rdi_212:word32], word32, uint64), word32, 0) == 2<32> l000000006D281170
l000000006D281170:
	fn000000006D2821E0(0x000000006D287000<p64>)
	Mem225[rdi_212:word32] = 0<32>
	Mem227[rbx_188:word64] = rax_204
	rax_182 = 1<u64>
l000000006D281081:
	_amsg_exit(0x1F<u64>)
	rax_182 = 1<u64>
l000000006D281090:
	return SLICE(rax_182, word32, 0)
fn000000006D281010_exit:


word32 fn000000006D281200(word32 edx, selector gs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
// MayUse:  gs:[0..15] rdx:[0..31]
// LiveOut: rax
// Trashed: SCZO rax rcx rdx
// Preserved: r12 r13 r14 r8 rbx rsi rsp
fn000000006D281200_entry:
	word32 edx = SLICE(rdx, word32, 0)
l000000006D281200:
	word32 r14d_157
	word32 eax_118
	word64 rsi_19 = Mem17[0x000000006D2841D0<p64>:word64]
	Mem23[rsi_19:word32] = edx
	word64 r12_25 = CONVERT(edx, word32, uint64)
	word32 r12d_34 = SLICE(r12_25, word32, 0)
	branch edx != 0<32> l000000006D281280
l000000006D281280:
	fn000000006D281730()
	eax_118 = SLICE(CONVERT(SLICE(r12_25 - 1<64>, word32, 0), word32, uint64), word32, 0) (alias)
	word64 rdx_36 = CONVERT(r12d_34, word32, uint64)
	branch eax_118 >u 1<32> l000000006D281308
l000000006D281308:
	fn000000006D282070()
	r14d_157 = SLICE(CONVERT(eax_118, word32, uint64), word32, 0) (alias)
	branch r12d_34 != 3<32> l000000006D281264
l000000006D28131A:
l000000006D281298:
	word32 eax_53 = SLICE(CONVERT(fn000000006D281010(rdx_36, gs), uint32, uint64), word32, 0)
	branch eax_53 == 0<32> l000000006D281261
l000000006D2812A1:
	fn000000006D282060()
	r14d_157 = SLICE(CONVERT(eax_53, word32, uint64), word32, 0) (alias)
	branch eax_53 == 0<32> l000000006D281320
l000000006D281320:
	branch r12d_34 != 1<32> l000000006D281261
l000000006D28132A:
l000000006D2812B6:
	branch r12d_34 != 1<32> l000000006D28132C
l000000006D28132C:
	fn000000006D282070()
	r14d_157 = SLICE(CONVERT(eax_53, word32, uint64), word32, 0) (alias)
l000000006D2812BC:
	fn000000006D281460()
	fn000000006D282070()
	r14d_157 = SLICE(CONVERT(eax_53, word32, uint64), word32, 0) (alias)
	branch eax_53 != 0<32> l000000006D281264
l000000006D2812D8:
	fn000000006D282070()
	fn000000006D282060()
l000000006D2812F2:
	fn000000006D281010(0<u64>, gs)
l000000006D281222:
	eax_118 = SLICE(CONVERT(Mem23[0x000000006D287018<p64>:word32], word32, uint64), word32, 0) (alias)
	branch eax_118 == 0<32> l000000006D281261
l000000006D28122C:
	fn000000006D281730()
	fn000000006D282070()
l000000006D28123E:
	fn000000006D282060()
	r14d_157 = SLICE(CONVERT(eax_118, word32, uint64), word32, 0) (alias)
	branch SLICE(CONVERT(fn000000006D281010(CONVERT(r12d_34, word32, uint64), gs), uint32, uint64), word32, 0) != 0<32> l000000006D281264
l000000006D281261:
	r14d_157 = 0<32> (alias)
l000000006D281264:
	Mem173[rsi_19:word32] = 0xFFFFFFFF<32>
	return SLICE(CONVERT(r14d_157, word32, uint64), word32, 0)
fn000000006D281200_exit:


BOOL DllMain(HANDLE hModule, DWORD dwReason, LPVOID lpReserved)
// stackDelta: 8; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  gs:[0..15] rdx:[0..63]
// LiveOut: eax
// Trashed: eax
// Preserved:
DllMain_entry:
l000000006D281350:
	Mem5[Mem0[0x000000006D284240<p64>:word64]:word32] = 0<32>
l000000006D28135D_thunk_fn000000006D281200:
	return SLICE(CONVERT(fn000000006D281200(dwReason, gs), uint32, uint64), BOOL, 0)
DllMain_exit:


void fn000000006D281370(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006D281460
//      fn000000006D282300
// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO rax rcx rdx
// Preserved: rsp
fn000000006D281370_entry:
l000000006D281370:
l000000006D28137A_thunk_fn000000006D282100:
	fn000000006D282100(0x000000006D287000<p64>, rcx)
	return
fn000000006D281370_exit:


void fn000000006D281380()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006D282300
// MayUse: 
// LiveOut:
// Trashed: SCZO rax rcx rdx
// Preserved: rsp
fn000000006D281380_entry:
l000000006D281380:
l000000006D281387_thunk_fn000000006D281370:
	fn000000006D281370(0x000000006D281390<p64>)
	return
fn000000006D281380_exit:


void fn000000006D281390()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: rsp
fn000000006D281390_entry:
l000000006D281390:
	return
fn000000006D281390_exit:


void hexdump()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved: rsp
hexdump_entry:
l000000006D2813A0:
	return
hexdump_exit:


void fn000000006D2813B0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO rax rdx
// Preserved: rsp
fn000000006D2813B0_entry:
l000000006D2813B0:
	word64 rax_10 = Mem0[Mem0[0x000000006D283010<p64>:word64]:word64]
	branch rax_10 == 0<64> l000000006D2813E5
l000000006D2813C3:
l000000006D2813C8:
	call rax_10 (retsize: 8;)
		uses: rdx:rax_16 + 8<64>
	word64 rax_16 = Mem15[0x000000006D283010<p64>:word64]
	rax_10 = Mem15[rax_16 + 8<64>:word64]
	Mem19[0x000000006D283010<p64>:word64] = rax_16 + 8<64>
	branch rax_10 != 0<64> l000000006D2813C8
l000000006D2813E5:
	return
fn000000006D2813B0_exit:


void fn000000006D2813F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006D281460
// MayUse: 
// LiveOut:
// Trashed: SCZO r8 rax rcx rdx
// Preserved: rbx rsi rsp
fn000000006D2813F0_entry:
l000000006D2813F0:
	word64 rdx_10 = Mem8[0x000000006D284180<p64>:word64]
	word32 eax_12 = Mem8[rdx_10:word32]
	word32 ecx_33 = SLICE(CONVERT(eax_12, word32, uint64), word32, 0)
	branch eax_12 == 0xFFFFFFFF<32> l000000006D281440
l000000006D281440:
	word64 rax_18 = 0<u64>
l000000006D281448:
	word64 r8_24 = CONVERT(SLICE(rax_18 + 1<64>, word32, 0), word32, uint64)
	ecx_33 = SLICE(CONVERT(SLICE(rax_18, word32, 0), word32, uint64), word32, 0) (alias)
	rax_18 = r8_24
	branch Mem8[rdx_10 + r8_24 * 8<64>:word64] != 0<64> l000000006D281448
l000000006D281458:
l000000006D281407:
	branch ecx_33 == 0<32> l000000006D28142B
l000000006D28140B:
	word64 rax_40 = CONVERT(ecx_33, word32, uint64)
	word64 rbx_44 = rdx_10 + rax_40 * 8<64>
	word64 rsi_47 = rdx_10 - 8<64> + (rax_40 - CONVERT(ecx_33 - 1<32>, word32, uint64)) * 8<64>
l000000006D281420:
	word64 r8_54
	call fn9090909090909090 (retsize: 8;)
		uses: r8:r8_54
		defs: r8:r8_54
	rbx_44 = rbx_44 - 8<64>
	branch rbx_44 != rsi_47 l000000006D281420
l000000006D28142B:
l000000006D281438_thunk_fn000000006D281370:
	fn000000006D281370(0x000000006D2813B0<p64>)
	return
fn000000006D2813F0_exit:


void fn000000006D281460()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
//      main
// MayUse: 
// LiveOut:
// Trashed: SCZO r8 rax rcx rdx
// Preserved: rsp
fn000000006D281460_entry:
l000000006D281460:
	branch SLICE(CONVERT(Mem0[0x000000006D287020<p64>:word32], word32, uint64), word32, 0) == 0<32> l000000006D281470
l000000006D281470:
	Mem10[0x000000006D287020<p64>:word32] = 1<32>
l000000006D28147A_thunk_fn000000006D2813F0:
	fn000000006D2813F0()
	return
l000000006D28146A:
	return
fn000000006D281460_exit:


void fn000000006D281480(word32 edx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx:[0..31]
// LiveOut:
// Trashed: SCZO rax rcx
// Preserved: rsp
fn000000006D281480_entry:
l000000006D281480:
	branch edx == 3<32> l000000006D2814A0
l000000006D281489:
	branch edx == 0<32> l000000006D2814A0
l000000006D2814A0:
	fn000000006D281B40(edx)
	return
l000000006D28148D:
	return
fn000000006D281480_exit:


word32 fn000000006D2814B0(word32 edx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006D281010
// MayUse:  edx:[0..31]
// LiveOut: edx
// Trashed: SCZO edx rax rcx
// Preserved: rbx rsi rsp
fn000000006D2814B0_entry:
l000000006D2814B0:
	word64 rax_10 = Mem8[0x000000006D284170<p64>:word64]
	branch Mem8[rax_10:word32] == 2<32> l000000006D2814C8
l000000006D2814C2:
	Mem13[rax_10:word32] = 2<32>
l000000006D2814C8:
	branch edx == 2<32> l000000006D2814E0
l000000006D2814E0:
	word64 rbx_18 = 0x000000006D28A050<p64>
	branch 0x000000006D28A050<p64> == 0x000000006D28A050<p64> l000000006D2814D2
l000000006D2814F3:
l000000006D2814F8:
	word64 rax_24 = Mem62[rbx_18:word64]
	branch rax_24 == 0<64> l000000006D281502
l000000006D281500:
	word64 rcx_80
	call rax_24 (retsize: 8;)
		uses: edx:edx_29,rcx:rcx_80
		defs: edx:edx_32,rcx:rcx_80
l000000006D281502:
	rbx_18 = rbx_18 + 8<64>
	branch 0x000000006D28A050<p64> != rbx_18 l000000006D2814F8
l000000006D28150B:
	return edx
l000000006D2814CD:
	branch edx == 1<32> l000000006D281520
l000000006D281520:
	fn000000006D281B40(edx)
	return edx
l000000006D2814D2:
	return edx
fn000000006D2814B0_exit:


void fn000000006D281540()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO rax
// Preserved: rsp
fn000000006D281540_entry:
l000000006D281540:
	return
fn000000006D281540_exit:


void fn000000006D281550(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006D2815C0
//      fn000000006D281730
// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO r12 r8 r9 rax rbx rcx rdx rsp
// Preserved:
fn000000006D281550_entry:
l000000006D281550:
	word64 rax_24 = fn000000006D282260(2<32>)
	fwrite(0x000000006D284060<p64>, 1<u64>, 0x1B<u64>, rax_24)
	word64 rcx_52
	call msvcrt.dll!vfprintf (retsize: 8;)
		uses: r8:fp + 0x10<64>,r9:rax_24,rcx:fn000000006D282260(2<32>),rdx:rcx
		defs: rcx:rcx_52
	abort()
l000000006D2815BA_thunk_fn000000006D2815C0:
	fn000000006D2815C0(rcx_52)
	return
fn000000006D281550_exit:


void fn000000006D2815C0(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006D281550
//      fn000000006D281730
// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO r12 r8 r9 rax rbx rcx rdx rsi rsp
// Preserved:
fn000000006D2815C0_entry:
l000000006D2815C0:
	word64 rbx_182
	word64 rbx_13 = CONVERT(Mem11[0x000000006D287064<p64>:word32], word32, int64)
	word32 ebx_16 = SLICE(rbx_13, word32, 0)
	branch ebx_16 <= 0<32> l000000006D2816F0
l000000006D2815DA:
	word64 rax_22 = Mem11[0x000000006D287068<p64>:word64] + 0x18<64>
	word64 rcx_299 = 0<64>
l000000006D2815F0:
	word32 ecx_37 = SLICE(rcx_299, word32, 0)
	word64 rdx_26 = Mem11[rax_22:word64]
	branch rdx_26 >u rcx l000000006D28160C
l000000006D2815F8:
	branch rcx <u rdx_26 + CONVERT(Mem11[Mem11[rax_22 + 8<64>:word64] + 8<64>:word32], word32, uint64) l000000006D281693
l000000006D28160C:
	rcx_299 = CONVERT(ecx_37 + 1<32>, word32, uint64)
	rax_22 = rax_22 + 0x28<64>
	rbx_182 = rbx_13 (alias)
	branch SLICE(rcx_299, word32, 0) != ebx_16 l000000006D2815F0
l000000006D281617:
	word64 rax_49 = fn000000006D281D50(rcx)
	branch rax_49 == 0<64> l000000006D281712
l000000006D28162B:
	word64 rbx_65 = rbx_182 * 5<64>
	word64 rax_67 = Mem62[0x000000006D287068<p64>:word64] + (rbx_65 << 3<64>)
	Mem69[rax_67 + 0x20<64>:word64] = rax_49
	Mem70[rax_67:word32] = 0<32>
	word64 rax_72 = fn000000006D281E80()
	word64 rax_85 = Mem70[0x000000006D287068<p64>:word64]
	word64 rcx_84 = CONVERT(Mem70[rax_49 + 0xC<64>:word32], word32, uint64) + rax_72
	Mem86[rax_85 + 0x18<64> + (rbx_65 << 3<64>):word64] = rcx_84
	branch SEQ(SLICE(rax_85, word32, 32), VirtualQuery(rcx_84, fp - 0x48<64>, 0x30<u64>)) == 0<64> l000000006D2816F7
l000000006D2816F7:
	fn000000006D281550(0x000000006D2840A0<p64>)
l000000006D281712:
	fn000000006D281550(0x000000006D284080<p64>)
l000000006D28172D_thunk_fn000000006D281730:
	fn000000006D281730()
	return
l000000006D281678:
	word64 rax_123 = CONVERT(dwLoc24, word32, uint64)
	word32 eax_142 = SLICE(rax_123, word32, 0)
	branch SLICE(CONVERT(SLICE(CONVERT(SLICE(rax_123 - 0x40<64>, word32, 0), word32, uint64), word32, 0) & 0xFFFFFFBF<32>, word32, uint64), word32, 0) == 0<32> l000000006D28168C
l000000006D281684:
	branch SLICE(CONVERT(SLICE(CONVERT(SLICE(rax_123 - 4<64>, word32, 0), word32, uint64), word32, 0) & 0xFFFFFFFB<32>, word32, uint64), word32, 0) != 0<32> l000000006D2816A0
l000000006D2816A0:
	word64 r8_147 = 4<u64>
	branch eax_142 == 2<32> l000000006D2816BC
l000000006D2816B8_1:
	r8_147 = 0x40<64> (alias)
l000000006D2816BC:
	word64 rbx_155 = (rbx_65 << 3<64>) + Mem86[0x000000006D287068<p64>:word64]
	Mem157[rbx_155 + 8<64>:word64] = qwLoc48
	Mem160[rbx_155 + 0x10<64>:word64] = qwLoc30
	branch VirtualProtect(qwLoc48, qwLoc30, r8_147, rbx_155) != 0<32> l000000006D28168C
l000000006D2816D8:
	GetLastError()
	fn000000006D281550(0x000000006D2840D8<p64>)
l000000006D2816F0:
	rbx_182 = 0<u64>
l000000006D28168C:
	Mem188[0x000000006D287064<p64>:word32] = Mem186[0x000000006D287064<p64>:word32] + 1<32>
l000000006D281693:
	return
fn000000006D2815C0_exit:


void fn000000006D281730()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
//      fn000000006D2815C0
// MayUse: 
// LiveOut:
// Trashed: SCZO r12 r15 r8 r9 rax rbp rbx rcx rdi rdx rsi rsp
// Preserved: r13 r14
fn000000006D281730_entry:
l000000006D281730:
	word32 edi_31 = SLICE(CONVERT(Mem26[0x000000006D287060<p64>:word32], word32, uint64), word32, 0)
	branch edi_31 == 0<32> l000000006D281768
l000000006D281768:
	Mem35[0x000000006D287060<p64>:word32] = 1<32>
	word64 rax_46 = CONVERT(CONVERT(SLICE(CONVERT(fn000000006D281DD0(), uint32, uint64), word32, 0), word32, int64) * 0x28<64> + 0xF<32>, word32, word64)
	fn000000006D282020(rax_46 & 0xFFFFFFFFFFFFFFF0<64>)
	word64 r12_54 = Mem35[0x000000006D284190<p64>:word64]
	word64 rbx_102 = Mem35[0x000000006D2841A0<p64>:word64]
	Mem56[0x000000006D287064<p64>:word32] = 0<32>
	Mem59[0x000000006D287068<p64>:word64] = fp - 0x78<64> - (rax_46 & 0xFFFFFFFFFFFFFFF0<64>) + 0x20<64>
	word64 rax_61 = r12_54 - rbx_102
	branch rax_61 <= 7<64> l000000006D281752
l000000006D2817C1:
	word64 rax_621
	word64 rdx_620 = CONVERT(Mem59[rbx_102:word32], word32, uint64)
	word32 edx_68 = SLICE(rdx_620, word32, 0)
	branch rax_61 > 0xB<64> l000000006D2818F8
l000000006D2818F8:
	branch edx_68 != 0<32> l000000006D281970
l000000006D2818FC:
	rax_621 = CONVERT(Mem59[rbx_102 + 4<64>:word32], word32, uint64)
	branch SLICE(CONVERT(SLICE(CONVERT(SLICE(rax_621, word32, 0), word32, uint64), word32, 0) | Mem59[rbx_102 + 8<64>:word32], word32, uint64), word32, 0) != 0<32> l000000006D2817D8
l000000006D28190A:
	rdx_620 = CONVERT(Mem59[rbx_102 + 0xC<64>:word32], word32, uint64)
	rbx_102 = rbx_102 + 0xC<64>
l000000006D2817CD:
	branch SLICE(rdx_620, word32, 0) != 0<32> l000000006D281970
l000000006D2817D5:
	rax_621 = CONVERT(Mem59[rbx_102 + 4<64>:word32], word32, uint64)
l000000006D2817D8:
	branch SLICE(rax_621, word32, 0) != 0<32> l000000006D281970
l000000006D281970:
	branch rbx_102 >=u r12_54 l000000006D281752
l000000006D281979:
	word64 r14_111 = Mem59[0x000000006D2841C0<p64>:word64]
l000000006D281980:
	word64 rsi_120 = CONVERT(Mem113[rbx_102 + 4<64>:word32], word32, uint64) + r14_111
	word32 r13d_124 = SLICE(CONVERT(SLICE(CONVERT(Mem113[rbx_102:word32], word32, uint64), word32, 0) + Mem113[rsi_120:word32], word32, uint64), word32, 0)
	fn000000006D2815C0(rsi_120)
	Mem138[rsi_120:word32] = r13d_124
	rbx_102 = rbx_102 + 8<64>
	branch rbx_102 <u r12_54 l000000006D281980
l000000006D2819A0:
l000000006D2817E0:
	branch SLICE(CONVERT(Mem59[rbx_102 + 8<64>:word32], word32, uint64), word32, 0) != 1<32> l000000006D2819B1
l000000006D2817EC:
	word64 rbx_146 = rbx_102 + 0xC<64>
	branch rbx_146 >=u r12_54 l000000006D281752
l000000006D2817F9:
	word64 r13_149 = Mem59[0x000000006D2841C0<p64>:word64]
l000000006D28183D:
	word64 rax_160 = CONVERT(Mem152[rbx_146:word32], word32, uint64) + r13_149
	word32 edx_163 = SLICE(CONVERT(CONVERT(Mem152[rbx_146 + 8<64>:byte], byte, word32), word32, uint64), word32, 0)
	word64 rsi_161 = CONVERT(Mem152[rbx_146 + 4<64>:word32], word32, uint64) + r13_149
	word64 r15_162 = Mem152[rax_160:word64]
	branch edx_163 == 0x20<32> l000000006D281948
l000000006D281948:
	word64 rdx_167 = CONVERT(Mem152[rsi_161:word32], word32, uint64)
	word64 rdx_170 = rdx_167 | 0xFFFFFFFF00000000<64>
	branch SLICE(rdx_167, word32, 0) < 0<32> l000000006D281956
l000000006D281952_1:
	rdx_170 = rdx_167
l000000006D281956:
	fn000000006D2815C0(rsi_161)
	Mem202[rsi_161:word32] = SLICE(r15_162 + (rdx_170 - rax_160), word32, 0)
l000000006D281858:
	branch edx_163 >u 0x20<32> l000000006D281920
l000000006D281920:
	branch edx_163 != 0x40<32> l000000006D2819A5
l000000006D281929:
	word64 r15_209 = r15_162 + (Mem152[rsi_161:word64] - rax_160)
	fn000000006D2815C0(rsi_161)
	Mem217[rsi_161:word64] = r15_209
l000000006D28185E:
	branch edx_163 == 8<32> l000000006D281810
l000000006D281810:
	word64 rdx_221 = CONVERT(CONVERT(Mem152[rsi_161:byte], byte, word32), word32, uint64)
	branch SLICE(rdx_221, byte, 0) >= 0<8> l000000006D281826
l000000006D281822_1:
	rdx_221 = rdx_221 | 0xFFFFFFFFFFFFFF00<64>
l000000006D281826:
	fn000000006D2815C0(rcx_246)
	Mem251[rsi_161:byte] = SLICE(r15_162 + (rdx_221 - rax_160), byte, 0)
l000000006D281834:
	rbx_146 = rbx_146 + 0xC<64>
	branch rbx_146 >=u r12_54 l000000006D2818A0
l000000006D281863:
	branch edx_163 != 0x10<32> l000000006D2819A5
l000000006D2819A5:
	fn000000006D281550(0x000000006D284138<p64>)
l000000006D2819B1:
	fn000000006D281550(0x000000006D284100<p64>)
l000000006D2819BF_thunk_fn000000006D2819C0:
	fn000000006D2819C0()
	return
l000000006D28186C:
	word64 rdx_312 = CONVERT(CONVERT(Mem152[rsi_161:word16], word16, word32), word32, uint64)
	branch SLICE(rdx_312, word16, 0) >= 0<16> l000000006D281883
l000000006D28187F_1:
	rdx_312 = rdx_312 | 0xFFFFFFFFFFFF0000<64>
l000000006D281883:
	fn000000006D2815C0(rcx_338)
	Mem343[rsi_161:word16] = SLICE(r15_162 + (rdx_312 - rax_160), word16, 0)
	rbx_146 = rbx_146 + 0xC<64>
	branch rbx_146 <u r12_54 l000000006D28183D
l000000006D28189B:
l000000006D2818A0:
	branch SLICE(CONVERT(Mem346[0x000000006D287064<p64>:word32], word32, uint64), word32, 0) <= 0<32> l000000006D281752
l000000006D2818AE:
	word64 rbx_355 = 0<u64>
l000000006D2818C0:
	word64 rax_365 = Mem346[0x000000006D287068<p64>:word64] + rbx_355
	word64 r8_367 = CONVERT(Mem346[rax_365:word32], word32, uint64)
	branch SLICE(r8_367, word32, 0) == 0<32> l000000006D2818DF
l000000006D2818D2:
	VirtualProtect(Mem346[rax_365 + 8<64>:word64], Mem346[rax_365 + 0x10<64>:word64], r8_367, fp - 0x4C<64>)
l000000006D2818DF:
	edi_31 = SLICE(CONVERT(edi_31 + 1<32>, word32, uint64), word32, 0) (alias)
	rbx_355 = rbx_355 + 0x28<64>
	branch edi_31 < Mem346[0x000000006D287064<p64>:word32] l000000006D2818C0
l000000006D2818EE:
l000000006D281752:
	return
fn000000006D281730_exit:


void fn000000006D2819C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006D281730
//      fn000000006D281B40
// MayUse: 
// LiveOut:
// Trashed: SCZO rax rcx
// Preserved: r12 rbx rdi rsi rsp
fn000000006D2819C0_entry:
l000000006D2819C0:
	EnterCriticalSection(0x000000006D2870A0<p64>)
	word64 rbx_17 = Mem14[0x000000006D287080<p64>:word64]
	branch rbx_17 == 0<64> l000000006D281A14
l000000006D2819E2:
l000000006D2819F0:
	word64 rax_27 = TlsGetValue(CONVERT(Mem14[rbx_17:word32], word32, uint64))
	branch GetLastError() != 0<32> l000000006D281A0B
l000000006D2819FD:
	branch rax_27 == 0<64> l000000006D281A0B
l000000006D281A02:
	word64 rax_42
	call Mem14[rbx_17 + 8<64>:word64] (retsize: 8;)
		uses: rax:rax_42,rcx:rax_27
		defs: rax:rax_42
l000000006D281A0B:
	rbx_17 = Mem14[rbx_17 + 0x10<64>:word64]
	branch rbx_17 != 0<64> l000000006D2819F0
l000000006D281A14:
	LeaveCriticalSection(0x000000006D2870A0<p64>)
	return
fn000000006D2819C0_exit:


void fn000000006D281A30(word32 ecx, word64 rdx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..31] rdx:[0..63]
// LiveOut:
// Trashed: SCZO rax rcx rdx
// Preserved: rbx rdi rsi rsp
fn000000006D281A30_entry:
	word32 ecx = SLICE(rcx, word32, 0)
l000000006D281A30:
	word32 edi_39 = SLICE(CONVERT(ecx, word32, uint64), word32, 0)
	branch SLICE(CONVERT(Mem11[0x000000006D287088<p64>:word32], word32, uint64), word32, 0) != 0<32> l000000006D281A50
l000000006D281A50:
	word64 rax_28 = calloc(1<u64>, 0x18<u64>)
	branch rax_28 == 0<64> l000000006D281AA3
l000000006D281AA3:
l000000006D281A67:
	Mem40[rax_28:word32] = edi_39
	Mem42[rax_28 + 8<64>:word64] = rdx
	EnterCriticalSection(0x000000006D2870A0<p64>)
	word64 rax_43 = Mem42[0x000000006D287080<p64>:word64]
	Mem45[0x000000006D287080<p64>:word64] = rax_28
	Mem46[rax_28 + 0x10<64>:word64] = rax_43
	LeaveCriticalSection(0x000000006D2870A0<p64>)
	return
l000000006D281A46:
	return
fn000000006D281A30_exit:


void fn000000006D281AB0(word32 ecx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..31]
// LiveOut:
// Trashed: SCZO rax rcx rdx
// Preserved: rbx rsp
fn000000006D281AB0_entry:
	word32 ecx = SLICE(rcx, word32, 0)
l000000006D281AB0:
	word32 ebx_65 = SLICE(CONVERT(ecx, word32, uint64), word32, 0)
	branch SLICE(CONVERT(Mem5[0x000000006D287088<p64>:word32], word32, uint64), word32, 0) != 0<32> l000000006D281AD0
l000000006D281AD0:
	EnterCriticalSection(0x000000006D2870A0<p64>)
	word64 rcx_17 = Mem5[0x000000006D287080<p64>:word64]
	branch rcx_17 == 0<64> l000000006D281B13
l000000006D281AE9:
	word64 rdx_22 = 0<u64>
l000000006D281AFB:
	word64 rax_33 = Mem5[rcx_17 + 0x10<64>:word64]
	branch SLICE(CONVERT(Mem5[rcx_17:word32], word32, uint64), word32, 0) != ebx_65 l000000006D281AF0
l000000006D281AF0:
	rdx_22 = rcx_17
	branch rax_33 == 0<64> l000000006D281B13
l000000006D281AF8:
	rcx_17 = rax_33
l000000006D281B05:
	branch rdx_22 == 0<64> l000000006D281B30
l000000006D281B30:
	Mem44[0x000000006D287080<p64>:word64] = rax_33
l000000006D281B0A:
	Mem45[rdx_22 + 0x10<64>:word64] = rax_33
l000000006D281B0E:
	free(rcx_17)
l000000006D281B13:
	LeaveCriticalSection(0x000000006D2870A0<p64>)
	return
l000000006D281AC1:
	return
fn000000006D281AB0_exit:


void fn000000006D281B40(word32 edx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006D281480
//      fn000000006D2814B0
// MayUse:  edx:[0..31]
// LiveOut:
// Trashed: SCZO rax rcx
// Preserved: rbx rsp
fn000000006D281B40_entry:
l000000006D281B40:
	branch edx == 2<32> l000000006D281B90
l000000006D281B90:
	fn000000006D282010()
	return
l000000006D281B4A:
	branch edx >u 2<32> l000000006D281B78
l000000006D281B78:
	branch edx != 3<32> l000000006D281B68
l000000006D281B7D:
	branch SLICE(CONVERT(Mem5[0x000000006D287088<p64>:word32], word32, uint64), word32, 0) == 0<32> l000000006D281B68
l000000006D281B87:
	fn000000006D2819C0()
l000000006D281B4C:
	branch edx == 0<32> l000000006D281BA0
l000000006D281BA0:
	branch SLICE(CONVERT(Mem5[0x000000006D287088<p64>:word32], word32, uint64), word32, 0) != 0<32> l000000006D281C00
l000000006D281C00:
	fn000000006D2819C0()
l000000006D281BAA:
	branch SLICE(CONVERT(Mem5[0x000000006D287088<p64>:word32], word32, uint64), word32, 0) != 1<32> l000000006D281B68
l000000006D281BB5:
	word64 rbx_52 = Mem5[0x000000006D287080<p64>:word64]
	branch rbx_52 == 0<64> l000000006D281BD9
l000000006D281BC1:
l000000006D281BC8:
	rbx_52 = Mem5[rbx_52 + 0x10<64>:word64]
	free(rbx_52)
	branch rbx_52 != 0<64> l000000006D281BC8
l000000006D281BD9:
	Mem64[0x000000006D287080<p64>:word64] = 0<64>
	Mem65[0x000000006D287088<p64>:word32] = 0<32>
	DeleteCriticalSection(0x000000006D2870A0<p64>)
l000000006D281B50:
	branch SLICE(CONVERT(Mem5[0x000000006D287088<p64>:word32], word32, uint64), word32, 0) == 0<32> l000000006D281C10
l000000006D281C10:
	InitializeCriticalSection(0x000000006D2870A0<p64>)
l000000006D281B5E:
	Mem73[0x000000006D287088<p64>:word32] = 1<32>
l000000006D281B68:
	return
fn000000006D281B40_exit:


void fn000000006D281C30(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO rax rcx rdx
// Preserved: rsp
fn000000006D281C30_entry:
l000000006D281C30:
	branch Mem0[rcx:word16] != 0x5A4D<16> l000000006D281C48
l000000006D281C39:
	branch Mem0[rcx + CONVERT(Mem0[rcx + 0x3C<64>:word32], word32, int64):word32] == 0x4550<32> l000000006D281C50
l000000006D281C50:
	return
l000000006D281C48:
	return
fn000000006D281C30_exit:


void fn000000006D281C60(word64 rcx, word64 rdx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..63] rdx:[0..63]
// LiveOut:
// Trashed: SCZO r8 r9 rax rcx rdx
// Preserved: rsp
fn000000006D281C60_entry:
l000000006D281C60:
	word64 rdx_8 = CONVERT(Mem0[rcx + 0x3C<64>:word32], word32, int64) + rcx
	word64 rax_11 = rdx_8 + 0x18<64> + CONVERT(CONVERT(Mem0[rdx_8 + 0x14<64>:word16], word16, word32), word32, uint64)
	word32 edx_14 = SLICE(CONVERT(CONVERT(Mem0[rdx_8 + 6<64>:word16], word16, word32), word32, uint64), word32, 0)
	branch edx_14 == 0<32> l000000006D281CAC
l000000006D281C7C:
	word64 r9_23 = rax_11 + 0x28<64> + CONVERT(edx_14 - 1<32>, word32, uint64) * 0x28<64>
l000000006D281C90:
	word64 rcx_27 = CONVERT(Mem0[rax_11 + 0xC<64>:word32], word32, uint64)
	word32 edx_32 = SLICE(rcx_27, word32, 0)
	branch rcx_27 >u rdx l000000006D281CA3
l000000006D281C9B:
	branch CONVERT(edx_32 + Mem0[rax_11 + 8<64>:word32], word32, uint64) >u rdx l000000006D281CAE
l000000006D281CA3:
	rax_11 = rax_11 + 0x28<64>
	branch rax_11 != r9_23 l000000006D281C90
l000000006D281CAC:
l000000006D281CAE:
	return
fn000000006D281C60_exit:


void fn000000006D281CB0(word32 rax_32_32, word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax_32_32:[0..31] rcx:[0..63]
// LiveOut:
// Trashed: SCZO r8 rax rcx rdx
// Preserved: r12 rbx rsi rsp
fn000000006D281CB0_entry:
l000000006D281CB0:
	branch SEQ(rax_32_32, strlen(rcx)) >u 8<64> l000000006D281D40
l000000006D281CC6:
	word64 rdx_20 = Mem11[0x000000006D2841C0<p64>:word64]
	branch Mem11[rdx_20:word16] != 0x5A4D<16> l000000006D281D2E
l000000006D281CD7:
	word64 rax_26 = CONVERT(Mem11[rdx_20 + 0x3C<64>:word32], word32, int64) + rdx_20
	branch Mem11[rax_26:word32] != 0x4550<32> l000000006D281D2E
l000000006D281CE6:
	branch Mem11[rax_26 + 0x18<64>:word16] != 0x20B<16> l000000006D281D2E
l000000006D281CEE:
	word64 r12_33 = rax_26 + 0x18<64> + CONVERT(CONVERT(Mem11[rax_26 + 0x14<64>:word16], word16, word32), word32, uint64)
	word32 eax_36 = SLICE(CONVERT(CONVERT(Mem11[rax_26 + 6<64>:word16], word16, word32), word32, uint64), word32, 0)
	branch eax_36 == 0<32> l000000006D281D40
l000000006D281CFF:
	word64 rsi_45 = r12_33 + 0x28<64> + CONVERT(eax_36 - 1<32>, word32, uint64) * 0x28<64>
l000000006D281D19:
	branch strncmp(r12_33, rcx, 8<u64>) != 0<32> l000000006D281D10
l000000006D281D10:
	r12_33 = r12_33 + 0x28<64>
	branch r12_33 == rsi_45 l000000006D281D40
l000000006D281D40:
	return
l000000006D281D2E:
	return
fn000000006D281CB0_exit:


word64 fn000000006D281D50(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006D2815C0
// MayUse:  rcx:[0..63]
// LiveOut: rax
// Trashed: SCZO r8 r9 rax rcx rdx
// Preserved: rsp
fn000000006D281D50_entry:
l000000006D281D50:
	word64 rdx_4 = Mem0[0x000000006D2841C0<p64>:word64]
	word64 rax_21 = 0<u64>
	branch Mem0[rdx_4:word16] != 0x5A4D<16> l000000006D281D70
l000000006D281D60:
	word64 r8_10 = CONVERT(Mem0[rdx_4 + 0x3C<64>:word32], word32, int64) + rdx_4
	branch Mem0[r8_10:word32] == 0x4550<32> l000000006D281D78
l000000006D281D78:
	branch Mem0[r8_10 + 0x18<64>:word16] != 0x20B<16> l000000006D281D70
l000000006D281D81:
	word64 rcx_18 = rcx - rdx_4
	word32 edx_22 = SLICE(CONVERT(CONVERT(Mem0[r8_10 + 6<64>:word16], word16, word32), word32, uint64), word32, 0)
	rax_21 = r8_10 + 0x18<64> + CONVERT(CONVERT(Mem0[r8_10 + 0x14<64>:word16], word16, word32), word32, uint64)
	branch edx_22 == 0<32> l000000006D281DC5
l000000006D281D97:
	word64 r9_31 = rax_21 + 0x28<64> + CONVERT(edx_22 - 1<32>, word32, uint64) * 0x28<64>
l000000006D281DA8:
	word64 r8_35 = CONVERT(Mem0[rax_21 + 0xC<64>:word32], word32, uint64)
	word32 edx_40 = SLICE(r8_35, word32, 0)
	branch rcx_18 <u r8_35 l000000006D281DBC
l000000006D281DB4:
	branch rcx_18 <u CONVERT(edx_40 + Mem0[rax_21 + 8<64>:word32], word32, uint64) l000000006D281D70
l000000006D281DBC:
	rax_21 = rax_21 + 0x28<64>
	branch rax_21 != r9_31 l000000006D281DA8
l000000006D281DC5:
	return 0<u64>
l000000006D281D70:
	return rax_21
fn000000006D281D50_exit:


word32 fn000000006D281DD0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006D281730
// MayUse: 
// LiveOut: rax
// Trashed: SCZO r8 rax rdx
// Preserved: rsp
fn000000006D281DD0_entry:
l000000006D281DD0:
	word64 rax_4 = Mem0[0x000000006D2841C0<p64>:word64]
	branch Mem0[rax_4:word16] != 0x5A4D<16> l000000006D281DF0
l000000006D281DE1:
	word64 rax_10 = rax_4 + CONVERT(Mem0[rax_4 + 0x3C<64>:word32], word32, int64)
	branch Mem0[rax_10:word32] == 0x4550<32> l000000006D281DF8
l000000006D281DF8:
	branch Mem0[rax_10 + 0x18<64>:word16] != 0x20B<16> l000000006D281DF0
l000000006D281E00:
	return SLICE(CONVERT(SLICE(CONVERT(CONVERT(Mem0[rax_10 + 6<64>:word16], word16, word32), word32, uint64), word32, 0), word32, uint64), word32, 0)
l000000006D281DF0:
	return 0<32>
fn000000006D281DD0_exit:


void fn000000006D281E10(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO r8 rax rcx rdx
// Preserved: rsp
fn000000006D281E10_entry:
l000000006D281E10:
	word64 r8_4 = Mem0[0x000000006D2841C0<p64>:word64]
	branch Mem0[r8_4:word16] != 0x5A4D<16> l000000006D281E30
l000000006D281E21:
	word64 rdx_10 = CONVERT(Mem0[r8_4 + 0x3C<64>:word32], word32, int64) + r8_4
	branch Mem0[rdx_10:word32] == 0x4550<32> l000000006D281E38
l000000006D281E38:
	branch Mem0[rdx_10 + 0x18<64>:word16] != 0x20B<16> l000000006D281E30
l000000006D281E40:
	word64 rax_17 = rdx_10 + 0x18<64> + CONVERT(CONVERT(Mem0[rdx_10 + 0x14<64>:word16], word16, word32), word32, uint64) + 0x27<64>
	word32 edx_20 = SLICE(CONVERT(CONVERT(Mem0[rdx_10 + 6<64>:word16], word16, word32), word32, uint64), word32, 0)
	branch edx_20 == 0<32> l000000006D281E78
l000000006D281E51:
	word64 rdx_29 = rax_17 + 0x28<64> + CONVERT(edx_20 - 1<32>, word32, uint64) * 0x28<64>
l000000006D281E60:
	branch (Mem0[rax_17 + 0<64>:byte] & 0x20<8>) == 0<8> l000000006D281E6F
l000000006D281E66:
	branch rcx == 0<64> l000000006D281E30
l000000006D281E6B:
	rcx = rcx - 1<64>
l000000006D281E6F:
	rax_17 = rax_17 + 0x28<64>
	branch rax_17 != rdx_29 l000000006D281E60
l000000006D281E78:
	return
l000000006D281E30:
	return
fn000000006D281E10_exit:


word64 fn000000006D281E80()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006D2815C0
// MayUse: 
// LiveOut: rax
// Trashed: SCZO r8 rax rdx
// Preserved: rsp
fn000000006D281E80_entry:
l000000006D281E80:
	word64 rax_4 = Mem0[0x000000006D2841C0<p64>:word64]
	word64 r8_15 = 0<u64>
	branch Mem0[rax_4:word16] != 0x5A4D<16> l000000006D281EA0
l000000006D281E91:
	word64 rdx_10 = CONVERT(Mem0[rax_4 + 0x3C<64>:word32], word32, int64) + rax_4
	branch Mem0[rdx_10:word32] == 0x4550<32> l000000006D281EA8
l000000006D281EA8:
	branch Mem0[rdx_10 + 0x18<64>:word16] != 0x20B<16> l000000006D281EB2
l000000006D281EAE_1:
	r8_15 = rax_4
l000000006D281EB2:
	return r8_15
l000000006D281EA0:
	return 0<u64>
fn000000006D281E80_exit:


void fn000000006D281EC0(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO r8 r9 rax rcx rdx
// Preserved: rsp
fn000000006D281EC0_entry:
l000000006D281EC0:
	word64 rax_4 = Mem0[0x000000006D2841C0<p64>:word64]
	branch Mem0[rax_4:word16] != 0x5A4D<16> l000000006D281EE0
l000000006D281ED1:
	word64 rdx_10 = CONVERT(Mem0[rax_4 + 0x3C<64>:word32], word32, int64) + rax_4
	branch Mem0[rdx_10:word32] == 0x4550<32> l000000006D281EE8
l000000006D281EE8:
	branch Mem0[rdx_10 + 0x18<64>:word16] != 0x20B<16> l000000006D281EE0
l000000006D281EF0:
	word64 rcx_16 = rcx - rax_4
	word64 rax_19 = rdx_10 + 0x18<64> + CONVERT(CONVERT(Mem0[rdx_10 + 0x14<64>:word16], word16, word32), word32, uint64)
	word32 edx_22 = SLICE(CONVERT(CONVERT(Mem0[rdx_10 + 6<64>:word16], word16, word32), word32, uint64), word32, 0)
	branch edx_22 == 0<32> l000000006D281EE0
l000000006D281F04:
	word64 r9_31 = rax_19 + 0x28<64> + CONVERT(edx_22 - 1<32>, word32, uint64) * 0x28<64>
l000000006D281F10:
	word64 r8_35 = CONVERT(Mem0[rax_19 + 0xC<64>:word32], word32, uint64)
	word32 edx_40 = SLICE(r8_35, word32, 0)
	branch rcx_16 <u r8_35 l000000006D281F24
l000000006D281F1C:
	branch rcx_16 <u CONVERT(edx_40 + Mem0[rax_19 + 8<64>:word32], word32, uint64) l000000006D281F38
l000000006D281F38:
	return
l000000006D281F24:
	rax_19 = rax_19 + 0x28<64>
	branch r9_31 != rax_19 l000000006D281F10
l000000006D281F2D:
	return
l000000006D281EE0:
	return
fn000000006D281EC0_exit:


void fn000000006D281F50(word32 ecx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rcx:[0..31]
// LiveOut:
// Trashed: SCZO r10 r11 r8 r9 rax rcx rdx
// Preserved: rsp
fn000000006D281F50_entry:
l000000006D281F50:
	word64 r11_4 = Mem0[0x000000006D2841C0<p64>:word64]
	branch Mem0[r11_4:word16] != 0x5A4D<16> l000000006D281F72
l000000006D281F62:
	word64 r8_10 = CONVERT(Mem0[r11_4 + 0x3C<64>:word32], word32, int64) + r11_4
	branch Mem0[r8_10:word32] == 0x4550<32> l000000006D281F80
l000000006D281F80:
	branch Mem0[r8_10 + 0x18<64>:word16] != 0x20B<16> l000000006D281F72
l000000006D281F89:
	word64 rax_16 = CONVERT(Mem0[r8_10 + 0x90<64>:word32], word32, uint64)
	branch SLICE(rax_16, word32, 0) == 0<32> l000000006D281F72
l000000006D281F94:
	word64 rdx_23 = r8_10 + 0x18<64> + CONVERT(CONVERT(Mem0[r8_10 + 0x14<64>:word16], word16, word32), word32, uint64)
	word32 r8d_26 = SLICE(CONVERT(CONVERT(Mem0[r8_10 + 6<64>:word16], word16, word32), word32, uint64), word32, 0)
	branch r8d_26 == 0<32> l000000006D281F72
l000000006D281FA8:
	word64 r10_35 = rdx_23 + 0x28<64> + CONVERT(r8d_26 - 1<32>, word32, uint64) * 0x28<64>
l000000006D281FB8:
	word64 r9_39 = CONVERT(Mem0[rdx_23 + 0xC<64>:word32], word32, uint64)
	word32 r8d_44 = SLICE(r9_39, word32, 0)
	branch rax_16 <u r9_39 l000000006D281FCD
l000000006D281FC4:
	branch rax_16 <u CONVERT(r8d_44 + Mem0[rdx_23 + 8<64>:word32], word32, uint64) l000000006D281FE0
l000000006D281FE0:
	word64 rax_50 = rax_16 + r11_4
l000000006D281FEF:
	word32 ecx_67 = SLICE(rcx, word32, 0)
	branch SLICE(CONVERT(Mem0[rax_50 + 4<64>:word32], word32, uint64), word32, 0) != 0<32> l000000006D281FFF
l000000006D281FF8:
	branch SLICE(CONVERT(Mem0[rax_50 + 0xC<64>:word32], word32, uint64), word32, 0) == 0<32> l000000006D281FD6
l000000006D281FFF:
	branch ecx_67 > 0<32> l000000006D281FE8
l000000006D281FE8:
	rcx = CONVERT(ecx_67 - 1<32>, word32, uint64)
	rax_50 = rax_50 + 0x14<64>
l000000006D282003:
	return
l000000006D281FCD:
	rdx_23 = rdx_23 + 0x28<64>
	branch r10_35 != rdx_23 l000000006D281FB8
l000000006D281FD6:
	return
l000000006D281F72:
	return
fn000000006D281F50_exit:


void fn000000006D282010()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006D281B40
// MayUse: 
// LiveOut:
// Trashed:
// Preserved: rsp
fn000000006D282010_entry:
l000000006D282010:
	__fninit()
	return
fn000000006D282010_exit:


void fn000000006D282020(word64 rax)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006D281730
// MayUse:  rax:[0..63]
// LiveOut:
// Trashed: SCZO
// Preserved: rax rcx rsp
fn000000006D282020_entry:
l000000006D282020:
	word64 rcx_10 = fp + 8<64>
	branch rax <u 0x1000<64> l000000006D282048
l000000006D28202F:
	rcx_10 = rcx_10 - 0x1000<64>
	Mem16[rcx_10:word64] = Mem14[rcx_10:word64]
	rax = rax - 0x1000<64>
	branch rax >u 0x1000<64> l000000006D28202F
l000000006D282048:
	word64 rcx_24 = rcx_10 - rax
	Mem27[rcx_24:word64] = Mem25[rcx_24:word64]
	return
fn000000006D282020_exit:


void fn000000006D282060()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
// MayUse: 
// LiveOut:
// Trashed: rax
// Preserved: rsp
fn000000006D282060_entry:
l000000006D282060:
	return
fn000000006D282060_exit:


void fn000000006D282070()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      DllMain
// MayUse: 
// LiveOut:
// Trashed: rax
// Preserved: rsp
fn000000006D282070_entry:
l000000006D282070:
	return
fn000000006D282070_exit:


void fn000000006D2820D0(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006D281000
// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO rax
// Preserved: rsp
fn000000006D2820D0_entry:
l000000006D2820D0:
	branch rcx == 0<64> l000000006D2820EF
l000000006D2820EF:
	return
l000000006D2820D5:
	Mem14[rcx + 0x10<64>:word64] = 0<64>
	Mem15[rcx + 8<64>:word64] = 0<64>
	Mem16[rcx:word64] = 0<64>
	return
fn000000006D2820D0_exit:


void fn000000006D282100(word64 rcx, word64 rdx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006D281370
// MayUse:  rcx:[0..63] rdx:[0..63]
// LiveOut:
// Trashed: SCZO rax
// Preserved: rbp rbx rcx rdi rdx rsi rsp
fn000000006D282100_entry:
l000000006D282100:
	branch rcx == 0<64> l000000006D2821BB
l000000006D2821BB:
l000000006D282117:
	word64 rax_37
	word64 rdx_34
	word64 rdx_42
	call lock (retsize: 8;)
		uses: rcx:8<u64>,rdx:rdx
	branch Mem14[rcx:word64] == 0<64> l000000006D282190
l000000006D282190:
	rax_37 = calloc(0x20<u64>, 8<u64>)
	Mem38[rcx:word64] = rax_37
	rdx_34 = 8<u64>
	branch rax_37 == 0<64> l000000006D2821C2
l000000006D2821A7:
	Mem43[rcx + 8<64>:word64] = rax_37
	Mem44[rcx + 0x10<64>:word64] = rax_37 + 0x100<64>
	rdx_42 = rax_37 + 0x100<64>
l000000006D282127:
	rax_37 = Mem14[rcx + 8<64>:word64]
	rdx_42 = Mem14[rcx + 0x10<64>:word64]
l000000006D28212F:
	branch rdx_42 == rax_37 l000000006D282158
l000000006D282158:
	word64 rcx_53 = Mem52[rcx:word64]
	word64 rax_54 = rax_37 - rcx_53
	word64 rdx_58 = rax_54 >> 3<64> << 4<64>
	word64 rax_60 = realloc(rcx_53, rdx_58)
	rdx_34 = rax_60
	branch rax_60 == 0<64> l000000006D2821C2
l000000006D2821C2:
	call unlock (retsize: 8;)
		uses: rcx:8<u64>,rdx:rdx_72
l000000006D28217C:
	Mem86[rcx:word64] = rax_60
	Mem89[rcx + 0x10<64>:word64] = rax_60 + rdx_58
	rax_37 = rax_60 + rax_54
l000000006D282134:
	word64 rdx_91 = rax_37 + 8<64>
	Mem95[rcx + 8<64>:word64] = rdx_91
	Mem97[rax_37:word64] = rdx
	call unlock (retsize: 8;)
		uses: rcx:8<u64>,rdx:rdx_91
l000000006D28214B:
	return
fn000000006D282100_exit:


void fn000000006D2821E0(word64 rcx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006D281010
// MayUse:  rcx:[0..63]
// LiveOut:
// Trashed: SCZO rax rcx
// Preserved: r12 rbx rsi rsp
fn000000006D2821E0_entry:
l000000006D2821E0:
	call lock (retsize: 8;)
		uses: rcx:8<u64>
	word64 r12_21 = Mem11[rcx:word64]
	word64 rbx_22 = Mem11[rcx + 8<64>:word64]
	Mem23[rcx + 0x10<64>:word64] = 0<64>
	Mem24[rcx + 8<64>:word64] = 0<64>
	Mem27[rcx:word64] = 0<64>
	word64 rcx_28
	call unlock (retsize: 8;)
		uses: rcx:8<u64>
		defs: rcx:rcx_28
	branch r12_21 == 0<64> l000000006D282246
l000000006D282222:
	rbx_22 = rbx_22 - 8<64>
	branch r12_21 >u rbx_22 l000000006D28223E
l000000006D28222B:
	word64 rax_41 = Mem27[rbx_22:word64]
	branch rax_41 == 0<64> l000000006D282222
l000000006D282233:
	call rax_41 (retsize: 8;)
		uses: rcx:rcx_47
		defs: rcx:rcx_49
	rbx_22 = rbx_22 - 8<64>
	branch r12_21 <=u rbx_22 l000000006D28222B
l000000006D28223E:
	free(r12_21)
l000000006D282246:
	return
fn000000006D2821E0_exit:


word64 fn000000006D282260(word32 ecx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// Called from:
//      fn000000006D281550
// MayUse:  ecx:[0..31]
// LiveOut: rax
// Trashed: SCZO rax rcx rdx
// Preserved: rbx rsp
fn000000006D282260_entry:
l000000006D282260:
	word64 rax_13
	call _iob_func (retsize: 8;)
		uses: ecx:ecx
		defs: rax:rax_13
	return rax_13 + CONVERT(SLICE(CONVERT(ecx, word32, uint64), word32, 0), word32, uint64) * 0x30<64>
fn000000006D282260_exit:


void main()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO r8 rax rcx rdx
// Preserved: rsp
main_entry:
l000000006D2822F0:
	fn000000006D281460()
	return
main_exit:


void fn000000006D282300()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO rax rcx rdx
// Preserved: rsp
fn000000006D282300_entry:
l000000006D282300:
l000000006D282300_thunk_fn000000006D281380:
	fn000000006D281380()
	return
fn000000006D282300_exit:


